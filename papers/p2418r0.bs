<pre class='metadata'>
Title: Add support for <code>std::generator</code>-like types to <code>std::format</code>
Shortname: P2418
Revision: 0
Audience: LEWG
Status: P
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2021-07-31
Markup Shorthands: markdown yes
</pre>

Proposal {#proposal}
========

[[P2286]] raised an issue of formatting `std::generator` from [[P2168]] and
similar views with C++20 `std::format`. The issue is illustrated in the
following example:

```c++
auto ints_coro(int n) -> std::generator<int> {
  for (int i = 0; i < n; ++i) {
    co_yield i;
  }
}
std::format("{}", ints_coro(10)); // error
```

Unfortunately we cannot make `std::generator` formattable because it is neither
const-iterable nor copyable and `std::format` takes arguments by `const&`. This
hasn't been a problem in C++20 because range adapters which can also be not
const-iterable are usually copyable. However, it will likely become a problem in
the future once coroutines are more widely adopted.

This paper proposes solving the issue by making `std::format` and other
formatting functions take arguments by forwarding references.

Other benefits of using forwarding references:

* Formatting of non-const-iterable views can be more efficient by avoiding a
    copy.
* It becomes possible to detect common lifetime errors, for example:
    ```
auto joined = std::format_join(std::vector{10, 20, 30, 40, 50, 60}, ":");
std::format("{:02x}", joined); // UB but can be made ill-formed with this proposal
    ```

Impact on existing code {#impact}
=======================

This change will break formatting of bit fields:

```c++
struct S {
  int bit: 1;
};

auto s = S();
std::format("{}", s.bit); // will become ill-formed
```

Supporting bit fields was one of the reasons `std::format` passed arguments by
`const&` in the first place. However, there are simple workarounds for this:

```c++
std::format("{}", +s.bit); // use + or cast to int
```

Implementation experience {#impl}
=========================

The proposal has been implemented in the {fmt} library. Arguments have been
passed by forwarding references since {fmt} 6.0 released about two years ago and
non-`const&` argument support in `formatter` specializations was added recently.

Wording {#wording}
=======

All wording is relative to the C++ working draft [[N4892]].

Update the value of the feature-testing macro `__cpp_lib_format` to the date of
adoption in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4892.pdf#page=504">[version.syn]</a>:

Change in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4892.pdf#page=740">[format.syn]</a>:

<pre>
namespace std {
  // [format.functions], formatting functions
  template&lt;class... Args>
    string format(<i>format-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class... Args>
    wstring format(<i>wformat-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class... Args>
    string format(const locale& loc, <i>format-string</i>&lt;Args...> fmt,
                  <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class... Args>
    wstring format(const locale& loc, <i>wformat-string</i>&lt;Args...> fmt,
                   <del>const Args&</del><ins>Args&&</ins>... args);

  ...

  template&lt;class Out, class... Args>
    Out format_to(Out out, <i>format-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class Out, class... Args>
    Out format_to(Out out, <i>wformat-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class Out, class... Args>
    Out format_to(Out out, const locale& loc, <i>format-string</i>&lt;Args...> fmt,
                  <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class Out, class... Args>
    Out format_to(Out out, const locale& loc, <i>wformat-string</i>&lt;Args...> fmt,
                  <del>const Args&</del><ins>Args&&</ins>... args);

  ...

  template&lt;class Out, class... Args>
    format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                        <i>format-string</i>&lt;Args...> fmt,
                                        <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class Out, class... Args>
    format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                        <i>wformat-string</i>&lt;Args...> fmt,
                                        <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class Out, class... Args>
    format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                        const locale& loc,
                                        <i>format-string</i>&lt;Args...> fmt,
                                        <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class Out, class... Args>
    format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                        const locale& loc,
                                        <i>wformat-string</i>&lt;Args...> fmt,
                                        <del>const Args&</del><ins>Args&&</ins>... args);

  template&lt;class... Args>
    size_t formatted_size(<i>format-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class... Args>
    size_t formatted_size(<i>wformat-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class... Args>
    size_t formatted_size(const locale& loc, <i>format-string</i>&lt;Args...> fmt,
                          <del>const Args&</del><ins>Args&&</ins>... args);
  template&lt;class... Args>
    size_t formatted_size(const locale& loc, <i>wformat-string</i>&lt;Args...> fmt,
                          <del>const Args&</del><ins>Args&&</ins>... args);
      
  ...

  template&lt;class Context = format_context, class... Args>
    format-arg-store&lt;Context, Args...>
      make_format_args(<del>const Args&</del><ins>Args&&</ins>... fmt_args);
  template&lt;class... Args>
    format-arg-store&lt;wformat_context, Args...>
      make_wformat_args(<del>const Args&</del><ins>Args&&</ins>... args);

  ...
}
</pre>

Change in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4892.pdf#page=748">[format.functions]</a>:

<pre>
template&lt;class... Args>
  string format(<i>format-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

<pre>
template&lt;class... Args>
  wstring format(<i>wformat-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

<pre>
template&lt;class... Args>
  string format(const locale& loc, <i>format-string</i>&lt;Args...> fmt,
                <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

<pre>
template&lt;class... Args>
  wstring format(const locale& loc, <i>wformat-string</i>&lt;Args...> fmt,
                 <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

<pre>
template&lt;class Out, class... Args>
  Out format_to(Out out, <i>format-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

<pre>
template&lt;class Out, class... Args>
  Out format_to(Out out, <i>wformat-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

<pre>
template&lt;class Out, class... Args>
  Out format_to(Out out, const locale& loc, <i>format-string</i>&lt;Args...> fmt,
                <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

<pre>
template&lt;class Out, class... Args>
  Out format_to(Out out, const locale& loc, <i>wformat-string</i>&lt;Args...> fmt,
                <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

<pre>
template&lt;class Out, class... Args>
  format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                      <i>format-string</i>&lt;Args...> fmt,
                                      <del>const Args&</del><ins>Args&&</ins>... args);
template&lt;class Out, class... Args>
  format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                      <i>wformat-string</i>&lt;Args...> fmt,
                                      <del>const Args&</del><ins>Args&&</ins>... args);
template&lt;class Out, class... Args>
  format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                      const locale& loc,
                                      <i>format-string</i>&lt;Args...> fmt,
                                      <del>const Args&</del><ins>Args&&</ins>... args);
template&lt;class Out, class... Args>
  format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                      const locale& loc,
                                      <i>wformat-string</i>&lt;Args...> fmt,
                                      <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

<pre>
template&lt;class... Args>
  size_t formatted_size(<i>format-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
template&lt;class... Args>
  size_t formatted_size(<i>wformat-string</i>&lt;Args...> fmt, <del>const Args&</del><ins>Args&&</ins>... args);
template&lt;class... Args>
  size_t formatted_size(const locale& loc, <i>format-string</i>&lt;Args...> fmt,
                        <del>const Args&</del><ins>Args&&</ins>... args);
template&lt;class... Args>
  size_t formatted_size(const locale& loc, <i>wformat-string</i>&lt;Args...> fmt,
                        <del>const Args&</del><ins>Args&&</ins>... args);
</pre>

...

Change in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4892.pdf#page=750">[formatter.requirements]</a>:

A type `F` meets the *Formatter* requirements if:

<ul>
<li>it meets the
  <ul>
  <li>*Cpp17DefaultConstructible* (Table 27),
  <li>*Cpp17CopyConstructible* (Table 29),
  <li>*Cpp17CopyAssignable* (Table 31), and
  <li>*Cpp17Destructible* (Table 32)
  </ul>
  requirements,
<li>it is swappable ([swappable.requirements]) for lvalues, and
<li>the expressions shown in Table 67 <ins>or Table [tab:mut.formatter]</ins>
    are valid and have the indicated semantics.
</ul>

<ins>
A type `F` meets the *BasicFormatter* requirements if it meets the *Formatter*
requirements and the expressions shown in Table 67 are valid and have the
indicated semantics. All types that have `formatter` specializations satisfy the
*BasicFormatter* requirements unless specified otherwise.
</ins>

...

Given character type `charT`, output iterator type `Out`, and formatting
argument type `T`, in <del>Table</del><ins>Tables</ins> 67 <ins>and
[tab:mut.formatter]</ins>:
* `f` is a value of type F,
* `u` is an lvalue of type T,
* `t` is a value of a type convertible to (possibly const) `T`,
* `PC` is `basic_­format_­parse_­context<charT>`,
* `FC` is `basic_­format_­context<Out, charT>`,
* `pc` is an lvalue of type `PC`, and
* `fc` is an lvalue of type `FC`.

`pc.begin()` points to the beginning of the *format-spec* ([format.string]) of
the replacement field being formatted in the format string. If *format-spec* is
empty then either `pc.begin() == pc.end()` or `*pc.begin() == '}'`.

Table 67: <i><ins>Basic</ins>Formatter</i> requirements [tab:formatter]

<table>
<thead>
<tr>
  <td>**Expression**
  <td>**Return type**
  <td>**Requirement**
</tr>
</thead>
<tr>
  <td>`f.parse(pc)`
  <td>`PC::iterator`
  <td>Parses *format-spec* (20.20.2) for type T in the range `[pc.begin(),
      pc.end())` until the first unmatched character. Throws `format_error`
      unless the whole range is parsed or the unmatched character is `}`.<br>
      [*Note 1*: This allows formatters to emit meaningful error messages.
      — *end note*]<br>
      Stores the parsed format specifiers in `*this` and returns an iterator
      past the end of the parsed range.
</tr>
<tr>
  <td><code>f.format(t,&nbsp;fc)</code>
  <td>`FC::iterator`
  <td>Formats `t` according to the specifiers stored in `*this`, writes the
      output to `fc.out()` and returns an iterator past the end of the output
      range. The output shall only depend on `t`, `fc.locale()`, `fc.arg(n)` for
      any value `n` of type `size_­t`, and the range `[pc.begin(), pc.end())`
      from the last call to `f.parse(pc)`.
</tr>
<tr>
  <td><code>f.format(u,&nbsp;fc)</code>
  <td>`FC::iterator`
  <td>As above, but does not modify `u`.
</tr>
</table>

<p>
<ins>Table �: Mutating *Formatter* requirements [tab:mut.formatter]</ins>

<table>
<thead>
<tr>
  <td><ins>**Expression**
  <td><ins>**Return type**
  <td><ins>**Requirement**
</tr>
</thead>
<tr>
  <td><ins>`f.parse(pc)`
  <td><ins>`PC::iterator`
  <td><ins>Parses *format-spec* (20.20.2) for type T in the range `[pc.begin(),
      pc.end())` until the first unmatched character. Throws `format_error`
      unless the whole range is parsed or the unmatched character is `}`.<br>
      [*Note 1*: This allows formatters to emit meaningful error messages.
      — *end note*]<br>
      Stores the parsed format specifiers in `*this` and returns an iterator
      past the end of the parsed range.
</tr>
<tr>
  <td><ins><code>f.format(u,&nbsp;fc)</code>
  <td><ins>`FC::iterator`
  <td><ins>Formats `u` according to the specifiers stored in `*this`, writes the
      output to `fc.out()` and returns an iterator past the end of the output
      range. The output shall only depend on `u`, `fc.locale()`, `fc.arg(n)` for
      any value `n` of type `size_t`, and the range `[pc.begin(), pc.end())`
      from the last call to `f.parse(pc)`.
</tr>
</table>

Change in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4892.pdf#page=755">[format.arg]</a>:

<pre>
namespace std {
  template<class Context>
  class basic_format_arg {
  private:
    ...
    template&lt;class T> explicit basic_format_arg(<del>const T&</del><ins>T&&</ins> v) noexcept;  // exposition only
    ...
}
</pre>
...
<pre>
template&lt;class T> explicit basic_format_arg(<del>const T&</del><ins>T&&</ins> v) noexcept;
</pre>

*Constraints*: The template specialization

<pre>
typename Context::template formatter_type&lt;<del>T</del><ins>remove_cvref_t&lt;T></ins>>
</pre>

meets the *Formatter* requirements ([formatter.requirements]). The extent to
which an implementation determines that the specialization meets the *Formatter*
requirements is unspecified, except that as a minimum the expression

<pre>
typename Context::template formatter_type&lt;<del>T</del><ins>remove_cvref_t&lt;T></ins>>()
  .format(declval&lt;<del>const </del>T&>(), declval&lt;Context&>())
</pre>

shall be well-formed when treated as an unevaluated operand.

...

The class `handle` allows formatting an object of a user-defined type.

<pre>
namespace std {
  template&lt;class Context>
  class basic_format_arg&lt;Context>::handle {
    <del>const </del>void* ptr_;                                             // exposition only
    void (*format_)(basic_format_parse_context&lt;char_type>&,
                    Context&, <del>const </del>void*);                       // exposition only

    template&lt;class T> explicit handle(<del>const T&</del><ins>T&&</ins> val) noexcept;  // exposition only
    ...
  };
}
</pre>

<pre>
template&lt;class T> explicit handle(<del>const T&</del><ins>T&&</ins> val) noexcept;
</pre>

<ins>*Mandates*:</ins>

<pre>
<ins>typename Context::template formatter_type&lt;<del>T</del><ins>remove_cvref_t&lt;T></ins>>()
  .format(declval&lt;const T&>(), declval&lt;Context&>())</ins>
</pre>

<ins>is well-formed or `is_const<remove_reference<T>>` is `false`.</ins>

*Effects*: <ins>Let `qualified_type` be `const remove_cvref<T>` if</ins>

<pre>
<ins>typename Context::template formatter_type&lt;<del>T</del><ins>remove_cvref_t&lt;T></ins>>()
  .format(declval&lt;const T&>(), declval&lt;Context&>())</ins>
</pre>

<ins>is well-formed and `remove_cvref<T>` otherwise.</ins> Initializes `ptr_`­ with
<del>`addressof(val)`</del><ins>`const_cast<void*>(addressof(val))`</ins> and `format_`­ with

<pre>
[](basic_format_parse_context&lt;char_type>& parse_ctx,
   Context& format_ctx, <del>const</del> void* ptr) {
  typename Context::template formatter_type&lt;<del>T</del><ins>remove_cvref_t&lt;T></ins>> f;
  parse_ctx.advance_to(f.parse(parse_ctx));
  format_ctx.advance_to(f.format(*static_cast&lt;<del>const T</del><ins>qualified_type</ins>*>(ptr), format_ctx));
}
</pre>

Change in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4892.pdf#page=757">[format.arg.store]</a>:

<pre>
template&lt;class Context = format_context, class... Args>
  format-arg-store&lt;Context, Args...> make_format_args(<del>const Args&</del><ins>Args&&</ins>... fmt_args);

...

template&lt;class... Args>
  format-arg-store&lt;wformat_context, Args...> make_wformat_args(<del>const Args&</del><ins>Args&&</ins>... args);
</pre>

Add to <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4892.pdf#page=1685">[diff.cpp20.utilities]</a>:


<ins>
**Affected subclause:** 20.20<br>
**Change:** Signature changes: `format`, `format_to`, `format_to_n`,
`formatted_size`.<br>
**Rationale:** Enable formatting of views that are neither const-iterable nor copyable.<br>
**Effect on original feature:** Valid C++20 code that passed bit fields to formatting functions may
become ill-formed. For example:
</ins>
<pre>
<ins>
struct tiny {
  int bit: 1;
};

auto t = tiny();
std::format("{}", t.bit); // ill-formed,
                          // previously returned "0"
</ins>
</pre>

<pre class=biblio>
{
  "P2168": {
    "title": "std::generator: Synchronous Coroutine Generator for Ranges",
    "authors": ["Lewis Baker", "Corentin Jabot"],
    "href": "https://wg21.link/p2168"
  },
  "P2286": {
    "title": "Formatting Ranges",
    "authors": ["Barry Revzin"],
    "href": "https://wg21.link/p2286"
  }
}
</pre>
