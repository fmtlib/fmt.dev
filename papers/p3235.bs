<pre class='metadata'>
Title: std::print more types faster with less memory
Shortname: P3235
Revision: 3
Audience: LEWG
Status: P
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2024-06-24
Markup Shorthands: markdown yes
</pre>

<p style="text-align: right">
"No work is less work than some work" - Andrei Alexandrescu
</p>

<!-- https://www.youtube.com/watch?v=5Q1awoAwBgQ&t=578s -->

Introduction {#intro}
============

[[P3107]] enabled an efficient implementation of `std::print` and applied the
optimization to fundamental and string types. The current paper applies this
important optimization to the remaining standard types.

Changes since R1 {#changes2}
================

- Added instructions to update the `__cpp_lib_print` feature testing macro.

Changes since R1 {#changes1}
================

- Made ranges not opt into the optimization per LEWG feedback.
- Fixed a markdown issue in wording.

Changes since R0 {#changes0}
================

- Fixed a rendering issue in the definition of range formatter.

Proposal {#proposal}
========

[[P3107]] "Permit an efficient implementation of std::print" brought
significant speedups (from 20% in the original benchmarks to 2x in
[[SO-LARGE-DATA]]) to `std::print` and
eliminated the need for dynamic memory allocations in the common case by
enabling direct writes into the stream buffer. To expedite the adoption of the
fix, [[P3107]] limited the scope to fundamental and string types but it is, of
course, beneficial to enable this optimization for other standard types that
have formatters. This was discussed in LEWG that encouraged writing such paper
(for ranges):

> LEWG requests for an additional paper to fix formatters for ranges

The current paper proposes opting in formatters for ranges and other standard
types into this optimization.

Here is a list of standard formatters that are not yet opted into the
`std::print` optimization.

Date and time formatters [[time.syn](https://eel.is/c++draft/time.syn)]:

```
  template<class Rep, class Period, class charT>
    struct formatter<chrono::duration<Rep, Period>, charT>;
  template<class Duration, class charT>
    struct formatter<chrono::sys_time<Duration>, charT>;
  template<class Duration, class charT>
    struct formatter<chrono::utc_time<Duration>, charT>;
  template<class Duration, class charT>
    struct formatter<chrono::tai_time<Duration>, charT>;
  template<class Duration, class charT>
    struct formatter<chrono::gps_time<Duration>, charT>;
  template<class Duration, class charT>
    struct formatter<chrono::file_time<Duration>, charT>;
  template<class Duration, class charT>
    struct formatter<chrono::local_time<Duration>, charT>;
  template<class Duration, class charT>
    struct formatter<chrono::local-time-format-t<Duration>, charT>;
  template<class charT> struct formatter<chrono::day, charT>;
  template<class charT> struct formatter<chrono::month, charT>;
  template<class charT> struct formatter<chrono::year, charT>;
  template<class charT> struct formatter<chrono::weekday, charT>;
  template<class charT> struct formatter<chrono::weekday_indexed, charT>;
  template<class charT> struct formatter<chrono::weekday_last, charT>;
  template<class charT> struct formatter<chrono::month_day, charT>;
  template<class charT> struct formatter<chrono::month_day_last, charT>;
  template<class charT> struct formatter<chrono::month_weekday, charT>;
  template<class charT> struct formatter<chrono::month_weekday_last, charT>;
  template<class charT> struct formatter<chrono::year_month, charT>;
  template<class charT> struct formatter<chrono::year_month_day, charT>;
  template<class charT> struct formatter<chrono::year_month_day_last, charT>;
  template<class charT> struct formatter<chrono::year_month_weekday, charT>;
  template<class charT> struct formatter<chrono::year_month_weekday_last, charT>;
  template<class Rep, class Period, class charT>
    struct formatter<chrono::hh_mm_ss<duration<Rep, Period>>, charT>;
  template<class charT> struct formatter<chrono::sys_info, charT>;
  template<class charT> struct formatter<chrono::local_info, charT>;
  template<class Duration, class TimeZonePtr, class charT>
    struct formatter<chrono::zoned_time<Duration, TimeZonePtr>, charT>;
```

`Rep` is an arithmetic type, `Period` is `std::ratio<...>`, `Duration` is
`std::duration<...>` and `charT` is `char` or `wchar_t` so all chrono formatters
except the one for `std::zoned_time` can be unconditionally opted into the
optimization. The formatter for `std::zoned_time` can be opted in for the default
`TimeZonePtr` (`const std::chrono::time_zone*`) but not arbitrary user-provided
`TimeZonePtr` that can be potentially locking.

<!-- https://www.godbolt.org/z/v87aY37GG --> 

`std::thread::id` formatter [[thread.thread.id](
https://eel.is/c++draft/thread.thread.id)]:

```
  template<class charT> struct formatter<thread::id, charT>;
```

Stacktrace formatters [[stacktrace.syn](
https://eel.is/c++draft/stacktrace.syn)]:

```
  // [stacktrace.format], formatting support
  template<> struct formatter<stacktrace_entry>;
  template<class Allocator> struct formatter<basic_stacktrace<Allocator>>;
```

`std::vector<bool>` formatter [[vector.syn](
https://eel.is/c++draft/vector.syn)]:

```
  // [vector.bool.fmt], formatter specialization for vector<bool>
  template<class T, class charT> requires is-vector-bool-reference<T>
    struct formatter<T, charT>;
```

`std::filesystem::path` formatter added in [[P2845]] and, as of 14 Apr 2024, in
the process of being merged into the standard draft:

```
// [fs.path.fmt], formatter
template<class charT> struct formatter<filesystem::path, charT>;
```

`std::thread::id`, stacktrace, `std::vector<bool>` and `std::filesystem::path`
formatters don't invoke any user code and can be opted into the optimization.

Tuple formatter [[format.tuple](https://eel.is/c++draft/format.tuple)]:

```
  template<class charT, formattable<charT>... Ts>
  struct formatter<pair-or-tuple<Ts...>, charT> {
    ...
  };
```

The tuple formatter can be opted in if all the element formatters are opted in.

Range formatter [[format.syn](https://eel.is/c++draft/format.syn)]:

<pre>
  // [format.range.fmtmap], [format.range.fmtset], [format.range.fmtstr], specializations for maps, sets, and strings
  template&lt;ranges::input_range R, class charT>
    requires (format_kind&lt;R> != range_format::disabled) &&
             formattable&lt;ranges::range_reference_t&lt;R>, charT>
  struct formatter&lt;R, charT> : <i>range-default-formatter</i>&lt;format_kind&lt;R>, R, charT> { };
</pre>

`std::queue` and `std::priority_queue` formatters [[queue.syn](
https://eel.is/c++draft/queue.syn)]:

```
  // [container.adaptors.format], formatter specialization for queue
  template<class charT, class T, formattable<charT> Container>
    struct formatter<queue<T, Container>, charT>;

  ...

  // [container.adaptors.format], formatter specialization for priority_queue
  template<class charT, class T, formattable<charT> Container, class Compare>
    struct formatter<priority_queue<T, Container, Compare>, charT>;
```

`std::stack` formatter [[stack.syn](https://eel.is/c++draft/stack.syn)]:

```
  // [container.adaptors.format], formatter specialization for stack
  template<class charT, class T, formattable<charT> Container>
    struct formatter<stack<T, Container>, charT>;
```

Range and container adaptor formatters are the most interesting case because
formatting requires iterating and user-defined iterators can be locking, at
least in principle. None of the standard containers, ranges and container
adaptors and even common concurrent containers such as `concurrent_vector` from
[[TBB]] provide locking iterators. For this reason, the current paper proposes
opting range and adaptor formatters into the optimization by default. Other
languages such as Java (see [[P3107]]) and even Rust don't try to prevent
deadlocks when printing any user-defined types to a C stream and for iterators
those are very unlikely. As shown in [[P3107]] examples of such deadlocks are
pretty contrived and may indicate other issues (bugs) in the program such as
incorrect lock scope.

And finally this paper proposes renaming `vprint_(non)unicode` and
`vprint_(non)unicode_locking` to `vprint_(non)unicode_buffered` and
`vprint_(non)unicode` respectively. The current naming is misleading because
all of these functions are locking and "nonlocking" overloads confusingly call
"locking" ones. In POSIX and other languages the default is locking so the new
naming is more consistent with standard practice. The new naming reflects the
fact that the main difference is buffering of all of the output.

<!--
use std::fmt;
use std::thread;
use std::sync::{Arc, Mutex};

struct Deadlockable {
  value: i32,
  mutex: Mutex<i32>
}

impl Deadlockable {
  fn new() -> Deadlockable {
    let value = 0;
    let mutex = Mutex::new(0);
    Deadlockable{value, mutex}
  }
}

impl fmt::Display for Deadlockable {
  fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {
    let _lock = self.mutex.lock();
    let value = self.value;
    write!(formatter, "{value}")
  }
}

fn main() {
  let d1 = Arc::new(Deadlockable::new());
  let d2 = Arc::clone(&d1);
  let t = thread::spawn(move || {
    print!("start\n");
    let _lock = d2.mutex.lock();
    let mut value = 0;
    for _ in 0..100000 {
      value += d2.value;
    }
    print!("done: {}\n", value);
  });
  for _ in 0..100000 {
    print!("{}", d1);
  }
  t.join().unwrap();
}

* thread #1, name = 'main', queue = 'com.apple.main-thread', stop reason = signal SIGSTOP
  * frame #0: 0x000000018bf00ea4 libsystem_kernel.dylib`__psynch_mutexwait + 8
    frame #1: 0x000000018bf3c060 libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait + 84
    frame #2: 0x000000018bf399f0 libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow + 248
    frame #3: 0x0000000100002414 foo`std::sync::mutex::Mutex$LT$T$GT$::lock::he1b5d29253ff35d8 [inlined] std::sys::pal::unix::locks::pthread_mutex::Mutex::lock::h04c034e29eed7ce5 at pthread_mutex.rs:106:17
    frame #4: 0x00000001000023fc foo`std::sync::mutex::Mutex$LT$T$GT$::lock::he1b5d29253ff35d8(self=0x0000600000e68010) at mutex.rs:273:24
    frame #5: 0x0000000100006388 foo`_$LT$foo..Deadlockable$u20$as$u20$core..fmt..Display$GT$::fmt::h874b80d270d20f33(self=0x0000600000e68010, formatter=0x000000016fdfed80) at foo.rs:20:17
    frame #6: 0x000000010000846c foo`_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..fmt..Display$GT$::fmt::h40aba7c48f6103bc(self=0x000000016fdfef48, f=0x000000016fdfed80) at sync.rs:3202:9
    frame #7: 0x0000000100036330 foo`core::fmt::write::h168dbafcf35bac68 [inlined] core::fmt::rt::Argument::fmt::h0c1f3a7ec00b5b49 at rt.rs:142:9 [opt]
    frame #8: 0x0000000100036328 foo`core::fmt::write::h168dbafcf35bac68 at mod.rs:1120:17 [opt]
    frame #9: 0x000000010001e9d0 foo`_$LT$$RF$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::hc1620e0a7617cfc2 [inlined] std::io::Write::write_fmt::h4c2dacc6783fd27e at mod.rs:1846:15 [opt]
    frame #10: 0x000000010001e9b4 foo`_$LT$$RF$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::hc1620e0a7617cfc2 at stdio.rs:736:9 [opt]
    frame #11: 0x000000010001efb4 foo`std::io::stdio::_print::h98bb68c4f6655455 [inlined] _$LT$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::he8d3da088f55fa14 at stdio.rs:710:9 [opt]
    frame #12: 0x000000010001efa4 foo`std::io::stdio::_print::h98bb68c4f6655455 [inlined] std::io::stdio::print_to::h61627dc059d946a4 at stdio.rs:1029:21 [opt]
    frame #13: 0x000000010001ef78 foo`std::io::stdio::_print::h98bb68c4f6655455 at stdio.rs:1106:5 [opt]
    frame #14: 0x00000001000066d0 foo`foo::main::h90b3e86ce32ac4c2 at foo.rs:39:5

* thread #2
  * frame #0: 0x000000018bf00ea4 libsystem_kernel.dylib`__psynch_mutexwait + 8
    frame #1: 0x000000018bf3c060 libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait + 84
    frame #2: 0x000000018bf399f0 libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow + 248
    frame #3: 0x000000010001e994 foo`_$LT$$RF$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::hc1620e0a7617cfc2 [inlined] std::sys::pal::unix::locks::pthread_mutex::Mutex::lock::hcae826fc403afc16 at pthread_mutex.rs:106:17 [opt]
    frame #4: 0x000000010001e988 foo`_$LT$$RF$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::hc1620e0a7617cfc2 [inlined] std::sync::remutex::ReentrantMutex$LT$T$GT$::lock::h84c9eb20e041c42b at remutex.rs:103:28 [opt]
    frame #5: 0x000000010001e944 foo`_$LT$$RF$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::hc1620e0a7617cfc2 [inlined] std::io::stdio::Stdout::lock::h26bca2a2786e6df7 at stdio.rs:677:29 [opt]
    frame #6: 0x000000010001e940 foo`_$LT$$RF$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::hc1620e0a7617cfc2 at stdio.rs:736:9 [opt]
    frame #7: 0x000000010001efb4 foo`std::io::stdio::_print::h98bb68c4f6655455 [inlined] _$LT$std..io..stdio..Stdout$u20$as$u20$std..io..Write$GT$::write_fmt::he8d3da088f55fa14 at stdio.rs:710:9 [opt]
    frame #8: 0x000000010001efa4 foo`std::io::stdio::_print::h98bb68c4f6655455 [inlined] std::io::stdio::print_to::h61627dc059d946a4 at stdio.rs:1029:21 [opt]
    frame #9: 0x000000010001ef78 foo`std::io::stdio::_print::h98bb68c4f6655455 at stdio.rs:1106:5 [opt]
    frame #10: 0x0000000100006884 foo`foo::main::_$u7b$$u7b$closure$u7d$$u7d$::h65e1df2905240c91 at foo.rs:36:5
-->

Wording {#wording}
=======

Update the value of the feature-testing macro `__cpp_lib_print` to the date of
adoption in [[version.syn](https://eel.is/c++draft/version.syn)].

Modify [[format.formatter.spec](https://eel.is/c++draft/format.formatter.spec)]
as indicated:

...

The parse member functions of these formatters interpret the format
specification as a *std-format-spec* as described in [[format.string.std](
https://eel.is/c++draft/format#string.std)]. <del>In addition, for each type `T`
for which a `formatter` specialization is provided above, each of the headers
provides the following specialization:</del>

<ins>
Unless specified otherwise, for each type `T` for which a `formatter`
specialization is provided by the library, each of the headers provides the
following specialization:
</ins>

```
template<> inline constexpr bool enable_nonlocking_formatter_optimization<T> = true;
```

...

Modify [[time.format](https://eel.is/c++draft/time.format)] as indicated:

...

If the *chrono-specs* is omitted, the chrono object is formatted as if by
streaming it to `basic_ostringstream<charT> os` with the formatting locale
imbued and copying `os.str()` through the output iterator of the context with
additional padding and adjustments as specified by the format specifiers.

[*Example 3*: 
```
string s = format("{:=>8}", 42ms);      // value of s is "====42ms"
```
— *end example*]

<ins>
For `chrono::zoned_time` the library only provides the following specialization
of `enable_nonlocking_formatter_optimization`:
</ins>

<pre><ins>
template&lt;class Duration>
  inline constexpr bool enable_nonlocking_formatter_optimization&lt;
    chrono::zoned_time&lt;Duration, const std::chrono::time_zone*>> = true;
</ins></pre>

```
template<class Duration, class charT>
  struct formatter<chrono::sys_time<Duration>, charT>;
```

...

Modify [[format.tuple](https://eel.is/c++draft/format.tuple)] as indicated:

For each of `pair` and `tuple`, the library provides the following formatter
specialization where *pair-or-tuple* is the name of the template:

<pre>
namespace std {
  template&lt;class charT, formattable&lt;charT>... Ts>
  struct formatter&lt;<i>pair-or-tuple</i>&lt;Ts...>, charT> {
    ...
  };

  <ins>template&lt;class... Ts>
    inline constexpr bool enable_nonlocking_formatter_optimization&lt;<i>pair-or-tuple</i>&lt;Ts...>> = 
      (enable_nonlocking_formatter_optimization&lt;Ts> && ...);</ins>
}
</pre>

Modify [[format.syn](https://eel.is/c++draft/format.syn)] as indicated:

<pre>
  ...

  // [format.range.fmtmap], [format.range.fmtset], [format.range.fmtstr], specializations for maps, sets, and strings
  template&lt;ranges::input_range R, class charT>
    requires (format_kind&lt;R> != range_format::disabled) &&
             formattable&lt;ranges::range_reference_t&lt;R>, charT>
  struct formatter&lt;R, charT> : <i>range-default-formatter</i>&lt;format_kind&lt;R>, R, charT> { };

  <ins>template&lt;ranges::input_range R>
      requires (format_kind&lt;R> != range_format::disabled)
    inline constexpr bool enable_nonlocking_formatter_optimization&lt;R> = false;</ins>

  // [format.arguments], arguments
  // [format.arg], class template basic_format_arg
  template&lt;class Context> class basic_format_arg;

  ...
</pre>

Modify [[print.fun](https://eel.is/c++draft/print.fun)] as indicated:

```
template<class... Args>
  void print(FILE* stream, format_string<Args...> fmt, Args&&... args);
```

*Effects*: Let `locksafe` be `(enable_nonlocking_formatter_optimization<
remove_cvref_t<Args>> && ...)`. If the ordinary literal encoding ([lex.charset])
is UTF-8, equivalent to:

<pre>
locksafe
  ? vprint_unicode<del>_locking</del>(stream, fmt.str, make_format_args(args...))
  : vprint_unicode<ins>_buffered</ins>(stream, fmt.str, make_format_args(args...));
</pre>

Otherwise, equivalent to:

<pre>
locksafe
  ? vprint_nonunicode<del>_locking</del>(stream, fmt.str, make_format_args(args...))
  : vprint_nonunicode<ins>_buffered</ins>(stream, fmt.str, make_format_args(args...));
</pre>

...

<pre>
void vprint_unicode<ins>_buffered</ins>(FILE* stream, string_view fmt, format_args args);
</pre>

*Effects*: Equivalent to:

<pre>
string out = vformat(fmt, args);
vprint_unicode<del>_locking</del>(stream, "{}", make_format_args(out));
</pre>

<pre>
void vprint_unicode<del>_locking</del>(FILE* stream, string_view fmt, format_args args);
</pre>

...

<pre>
void vprint_nonunicode<ins>_buffered</ins>(FILE* stream, string_view fmt, format_args args);
</pre>

*Effects*: Equivalent to:

<pre>
string out = vformat(fmt, args);
vprint_nonunicode<del>_locking</del>("{}", make_format_args(out));
</pre>

<pre>
void vprint_nonunicode<del>_locking</del>(FILE* stream, string_view fmt, format_args args);
</pre>

...

<pre class=biblio>
{
  "P2845": {
    "title": "Formatting of std::filesystem::path",
    "authors": ["Victor Zverovich"],
    "href": "https://wg21.link/p2845"
  },
  "P3107": {
    "title": "Permit an efficient implementation of std::print",
    "authors": ["Victor Zverovich"],
    "href": "https://wg21.link/p3107"
  },
  "TBB": {
    "title": "oneAPI Threading Building Blocks (oneTBB)",
    "href": "https://oneapi-src.github.io/oneTBB/"
  },
  "SO-LARGE-DATA": {
    "title": "How to use {fmt} with large data",
    "authors": ["Matthew Busche"],
    "href": "https://stackoverflow.com/a/78457454/471164"
  }
}
</pre>
