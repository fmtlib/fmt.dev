<pre class='metadata'>
Title: Formatting enums
Shortname: P3070
Revision: 0
Audience: SG16
Status: D
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2023-12-09
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
  ins { text-decoration: none; }
  ins code { background: #cfc !important; }

  .poll th, .poll td {
    text-align: right;
    width: 20%;
  }
</style>

<p style="text-align: right">
"The Tao is constantly moving, the path is always changing."
â€• Lao Tzu
</p>

Introduction {#intro}
============

This paper proposes a new extension API for `std::format` that makes it easy to
format enums as other types (normally integers or strings) and can be extended
in the future for user-defined types other than enums.

Problems {#problems}
========

TODO: show that defining a formatter for enum is cumbersome

Proposal {#proposal}
========

TODO: performance

Wording {#wording}
=======

TODO

Implementation {#impl}
==============

The proposed extension API has been implemented in the open-source {fmt} library
([[FMT]]).

TODO: how long it was available

<pre class=biblio>
{
  "FMT": {
    "title": "The {fmt} library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  }
}
</pre>
