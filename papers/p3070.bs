<pre class='metadata'>
Title: Formatting enums
Shortname: P3070
Revision: 4
Audience: LEWG
Status: D
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2025-06-16
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
  ins { text-decoration: none; }
  ins code { background: #cfc !important; }

  .poll th, .poll td {
    text-align: right;
    width: 20%;
  }

  .wording ul li::marker {
    content: '– ';
  }
</style>

<p style="text-align: right">
"It is a mistake to think you can solve any major problems just with potatoes."
 ― Douglas Adams
</p>

# Introduction # {#intro}

`std::format`, introduced in C++20, has significantly improved string
formatting in C++. However, custom formatting of enumeration types currently
requires creating `formatter` specializations which can be unnecessarily
verbose for the common case of forwarding to other formatters. This proposal
aims to introduce a more streamlined method for defining custom formatters for
enums. When formatting enums as integers, this approach is more efficient than
using a `formatter` specialization.

# Changes since R3 # {#changes3}

- Move "The meaning of `format_as` is established as-if by performing
    argument-dependent lookup only ([basic.lookup.argdep](
    https://eel.is/c++draft/basic.lookup.argdep))." to [[contents](
    https://eel.is/c++draft/format.arg)] per feedback from Jonathan Wakely.

# Changes since R2 # {#changes2}

- Added wording to ensure that `format_as` is only considered if found by ADL
    to match the design intent.
- Extended `format_as` to user-defined class (including union) types in addition
    to enums per LEWG feedback.
- Added LEWG poll results.

# Changes since R1 # {#changes1}

- Added Wording, Alternatives Considered and Acknowledgements sections.
- Clarified that `std::byte` formatting will be proposed in a separate paper.

# Changes since R0 # {#changes0}

- Included the SG16 poll results.

# LEWG Polls for R2 # {#lewg-polls}

**POLL**: We would like the utility `format_as` described in P3070R2 to be
extended to apply on user defined types.


```
SF  F  N  A SA
10  8  0  1  0
```

**Outcome**: Consensus in favor

**POLL**: Modify the wording to be applied to user defined types, and amend
fixes above to match intention for ADL only, then publish P3070R3 (to be
reviewed by Robert and Fabio) then forward to LWG for C++26.

```
SF  F  N  A SA
 8 11  1  0  0
```

**Outcome**: Strong consensus in favor

# SG16 Poll # {#polls}

**Poll 3: Forward P3070R0 to LEWG.**

No objection to unanimous consent.

# Motivation and Scope # {#motivation}

Enums are fundamental in C++ for representing sets of named constants.
Often, there is a need to convert these enums to string representations,
particularly for logging, debugging, or interfacing with users.
The current methods for customizing enum formatting in `std::format` are not
as user-friendly as they could be.

With the introduction of a `format_as` extension point for enums, we aim to:

* Simplify the process of defining custom formatting representations for enums.
* Improve enum formatting efficiency.
* Ensure compatibility with existing code and extension mechanisms.

Consider the following example:

```c++
namespace kevin_namespacy {
enum class film {
  house_of_cards, american_beauty, se7en = 7
};
}
```

If we want to format this enum as its underlying type with `std::format` we have
two options. The first option is defining a formatter specialization:

```c++
template <>
struct std::formatter<kevin_namespacy::film> : formatter<int> {
  auto format(kevin_namespacy::film f, format_context& ctx) const {
    return formatter<int>::format(std::to_underlying(f), ctx);
  }
};
```

The drawback of this approach is that, even when forwarding to another
`formatter`, it introduces a significant amount of boilerplate code.
Additionally, this customization cannot be implemented within the same
namespace.

The second option is converting the enum to the underlying type:

```c++
film f = kevin_namespacy::se7en;
auto s = std::format("{}", std::to_underlying(f));
```

The drawback of this option is that the conversion must be performed at every
call site, adding unnecessary complexity and repetition.

# Proposed Change # {#proposal}

The current paper proposes adding a `format_as` extension point to
`std::format`. `format_as` is a function discovered by argument-dependent
lookup (ADL) that takes an enum to be formatted as an argument and converts
it to an object of another formattable type, typically an integer or a string.
It acts as a shorthand for defining a `formatter` specialization and is fully
compatible with existing extension mechanisms.

This significantly improves the user experience by eliminating almost all
boilerplate code:

**Before:**

```c++
namespace kevin_namespacy {
enum class film {...};
}
template <>
struct std::formatter<kevin_namespacy::film> : formatter<int> {
  auto format(kevin_namespacy::film f, format_context& ctx) const {
    return formatter<int>::format(std::to_underlying(f), ctx);
  }
};
```

**After:**

```c++
namespace kevin_namespacy {
enum class film {...};
auto format_as(film f) { return std::to_underlying(f); }
}
```

The semantics of `format_as` is the same as the corresponding "forwarding"
`formatter` specialization.

`format_as` can be used to format enums as strings as well:

```c++
enum class color {red, green, blue};

auto format_as(color c) -> std::string_view {
  switch (c) {
    case color::red:   return "red";
    case color::green: return "green";
    case color::blue:  return "blue";
  }
}

auto s = std::format("{}", color::red); // s == "red"
```

Apart from usability improvements, if the target type is one of the built-in
types directly supported by `std::format`, formatting can be implemented more
efficiently. Instead of going through the general-purpose `formatter` API the
enum can be converted directly to the built-in type at the call site.
And conversion from an enum to its underlying type is effectively a noop so
there is no effect on the binary size.

The difference in performance can be seen in the following benchmark results
for an enum similar to `std::byte`:

<pre>
---------------------------------------------------------------------
Benchmark                           Time             CPU   Iterations
---------------------------------------------------------------------
BM_Formatter                     17.7 ns         17.7 ns     38037070
BM_FormatAs                      8.90 ns         8.88 ns     79036210
</pre>

This will allow making `std::byte` formattable with ~2x better performance
than using a `formatter` specialization. It will be done in a follow-up paper.

This can be trivially extended to other user-defined types and not just enums.
At the time of writing of R0 of this paper we only had extensive usage
experience with enums but since the paper was in the review pipeline for a long
time we now have implementation and usage experience with all types.

# Impact on the Standard # {#impact}

This proposal is an additive change to the existing `<format>` standard library
component and does not require changes to current language features or core
library interfaces. It is a backward-compatible enhancement that addresses
a common use case in `std::format`.

# Wording # {#wording}

<!-- Wording test: https://www.godbolt.org/z/Y9ehzbY59 -->

<div class="wording">

<!-- Disabling implicit conversions would make enums::format_as not work
     and therefore not proposed. -->

Modify [[contents](https://eel.is/c++draft/format.arg)]:

...

The meaning of the unqualified name `swap` is established in an overload
resolution context for swappable values (\[swappable.requirements\]). The
meanings of the unqualified names `make_error_code`, `make_error_condition`,
`from_stream`, and `submdspan_mapping` are established as-if by performing
argument-dependent lookup (\[basic.lookup.argdep\]).

<ins>
The meaning of `format_as` is established as-if by performing
argument-dependent lookup only ([basic.lookup.argdep](
https://eel.is/c++draft/basic.lookup.argdep)).
</ins>

Modify [[format.arg](https://eel.is/c++draft/format.arg)]:

```
template<class T> explicit basic_format_arg(T& v) noexcept;
```

*Constraints*: `T` satisfies *formattable-with*`<Context>`.

*Preconditions*: If `decay_t<T>` is `char_type*` or `const char_type*`,
`static_cast<const char_type*>(v)` points to a NTCTS ([[defns.ntcts](
https://eel.is/c++draft/defns.ntcts)]).

<!-- ADL part is based on https://eel.is/c++draft/range.access.begin -->

*Effects*: Let `TD` be `remove_const_t<T>`.
<ins>
If `format_as(v)` is a valid expression and `TD` is a class or enumeration type,
let `u` be `format_as(v)` and `U` be `remove_cvref_t<decltype(u)>`.
Otherwise, let `u` be `v` and `U` be `TD`.
</ins>

- If <code><del>TD</del><ins>U</ins></code> is `bool` or `char_type`, initializes
    `value` with <code><del>v</del><ins>u</ins></code>;

- otherwise, if <code><del>TD</del><ins>U</ins></code> is `char` and `char_type` is
    `wchar_t`, initializes `value` with
    <code>static_cast&lt;wchar_t>(static_cast&lt;unsigned char>(<del>v</del><ins>u</ins>))</code>;

- otherwise, if <code><del>TD</del><ins>U</ins></code> is a signed integer type
    ([[basic.fundamental](https://eel.is/c++draft/basic.fundamental)]) and
    <code>sizeof(<del>TD</del><ins>U</ins>) &lt;= sizeof(int)</code>, initializes `value`
    with <code>static_cast<int>(<del>v</del><ins>u</ins>)</code>;

- otherwise, if <code><del>TD</del><ins>U</ins></code> is an unsigned integer type and
    <code>sizeof(<del>TD</del><ins>U</ins>) &lt;= sizeof(unsigned int)</code>,
    initializes `value` with <code>static_cast&lt;unsigned int>(<del>v</del><ins>u</ins>)</code>;

- otherwise, if <code><del>TD</del><ins>U</ins></code> is a signed integer type and
    <code>sizeof(<del>TD</del><ins>U</ins>) &lt;= sizeof(long long int)</code>,
    initializes `value` with <code>static_cast&lt;long long int>(<del>v</del><ins>u</ins>)</code>;

- otherwise, if <code><del>TD</del><ins>U</ins></code> is an unsigned integer type and
    <code>sizeof(<del>TD</del><ins>U</ins>) &lt;= sizeof(unsigned long long int)</code>,
    initializes `value` with <code>static_cast&lt;unsigned long long int>(<del>v</del><ins>u</ins>)</code>;

- otherwise, if <code><del>TD</del><ins>U</ins></code> is a standard floating-point type,
    initializes `value` with <code><del>v</del><ins>u</ins></code>;

- otherwise, if <code><del>TD</del><ins>U</ins></code> is a specialization of
    <code>basic_string_view</code> or <code>basic_string</code><del>
    and</del><ins>,</ins> <code><del>TD</del><ins>U</ins>::​value_type</code>
    is `char_type` <ins>and `format_as(v)` is not a valid expression</ins>,
    initializes `value` with `basic_string_view<char_type>(v.data(), v.size())`;

- otherwise, if <code>decay_t&lt;<del>TD</del><ins>U</ins>&gt;</code> is `char_type*` or
    `const char_type*` <ins>and `format_as(v)` is not a valid expression</ins>,
    initializes `value` with `static_cast<const char_type*>(v)`;

- otherwise, if <code>is_void_v&lt;remove_pointer_t&lt;<del>TD</del><ins>U</ins>&gt;&gt;</code>
    is `true` or `is_null_pointer_v<TD>` is `true`, initializes `value` with
    <code>static_cast&lt;const void*>(<del>v</del><ins>u</ins>)</code>;

- otherwise, initializes `value` with `handle(v)`.

Modify [[format.formatter.spec](https://eel.is/c++draft/format.formatter.spec)]:

The functions defined in [[format.functions](
https://eel.is/c++draft/format.functions)] use specializations of the class
template formatter to format individual arguments.

Let `charT` be either `char` or `wchar_t`. Each specialization of `formatter`
is either enabled or disabled, as described below. A *debug-enabled*
specialization of `formatter` additionally provides a public, constexpr,
non-static member function `set_debug_format()` which modifies the state of
the `formatter` to be as if the type of the *std-format-spec* parsed by the
last call to `parse` were `?`. Each header that declares the template
`formatter` provides the following enabled specializations:

- The debug-enabled specializations

    ```
    template<> struct formatter<char, char>;
    template<> struct formatter<char, wchar_t>;
    template<> struct formatter<wchar_t, wchar_t>;
    ```

    ...

The `parse` member functions of these formatters interpret the format
specification as a *std-format-spec* as described in [[format.string.std](
https://eel.is/c++draft/format.string.std)].

<ins>
Let *format-as-type*`<T>` for type `T` be
`remove_cvref_t<decltype(format_as(declval<const T&>()))>`.
Each header that declares the template `formatter` provides the following
enabled specialization:
</ins>

<pre>
<ins>template&lt;class T, class charT>
  requires (formattable&lt;<i>format-as-type</i>&lt;T>, charT> &&
            (is_enum_v&lt;T> || is_class_v&lt;T> || is_union_v&lt;T>))
struct formatter&lt;T, charT> {
 private:
  formatter&lt;<i>format-as-type</i>&lt;T>, charT> <i>fmt_</i>;  <i>// exposition-only</i>

 public:
  constexpr format_parse_context::iterator parse(format_parse_context& ctx);

  template &lt;typename FormatContext>
    typename FormatContext::iterator format(const T& val, FormatContext& ctx) const;
};</ins>
</pre>

<pre>
<ins>constexpr format_parse_context::iterator parse(format_parse_context& ctx);</ins>
</pre>

<ins>
*Returns*: <code><i>fmt_</i>.parse(ctx)</code>.

<pre>
<ins>template &lt;typename FormatContext>
  typename FormatContext::iterator format(const T& val, FormatContext& ctx) const;</ins>
</pre>

<ins>
*Returns*: <code><i>fmt_</i>.format(format_as(val), ctx)</code>.
</ins>

<!-- TODO: set_debug_format -->

</div>

# Alternatives Considered # {#alt}

Another option is to use the `format_kind` extension point:

```
namespace kevin_namespacy {
enum class film {
  house_of_cards, american_beauty, se7en = 7
};
}

template<>
std::format_as std::format_kind<kevin_namespacy::film> =
  [](kevin_namespacy::film f) {
    return std::to_underlying(f);
  };
```

where `format_as` is

```
template <typename F>
struct format_as {
   F f;

   template<typename T>
   constexpr decltype(auto) operator()(T&& t) const {
     return std::invoke(f, std::forward<T>(t));
   }
};
```

The benefit of this approach is that it eliminates the need to introduce
another extension point. However, it has several drawbacks compared to the
ADL-based solution:

* It's more cumbersome to use.
* It introduces an extra level of indirection, and at least the debug code
    will be less efficient.
* It doesn't allow specifying a single conversion for all enums in a namespace
    which, based on usage experience in {fmt}, is an important use case.
    <!-- Possibly can be addressed with reflection. -->

For these reasons, this approach is not proposed in the current paper.

# Implementation # {#impl}

The proposed extension API has been implemented in the open-source {fmt} library
([[FMT]]) and as of January 2025 has been shipping for three major versions
for enums and two major version for other user-defined types.

# Acknowledgements # {#ack}

Thanks to Tomasz Kamiński for providing useful feedback and suggesting an
alternative extension API.

# Appendix A: Benchmark # {#appendix}

This appendix gives the source code of the benchmark used for comparing
performance of `format_as` with a `formatter` specialization.

```c++
#include <benchmark/benchmark.h>
#include <fmt/core.h>

enum class byte_for_formatter : unsigned char {};

template <>
struct fmt::formatter<byte_for_formatter> : fmt::formatter<unsigned char> {
  auto format(byte_for_formatter b, fmt::format_context& ctx) {
    return fmt::formatter<unsigned char>::format(
      static_cast<unsigned char>(b), ctx);
  }
};

enum class byte_for_format_as : unsigned char {};

auto format_as(byte_for_format_as b) { return static_cast<unsigned char>(b); }

static void BM_Formatter(benchmark::State& state) {
  auto b = byte_for_formatter();
  for (auto _ : state) {
    std::string formatted = fmt::format("{}", b);
    benchmark::DoNotOptimize(formatted);
  }
}
BENCHMARK(BM_Formatter);

static void BM_FormatAs(benchmark::State& state) {
  auto b = byte_for_format_as();
  for (auto _ : state) {
    std::string formatted = fmt::format("{}", b);
    benchmark::DoNotOptimize(formatted);
  }
}
BENCHMARK(BM_FormatAs);

BENCHMARK_MAIN();
```

<pre class=biblio>
{
  "FMT": {
    "title": "The {fmt} library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  }
}
</pre>
