<pre class='metadata'>
Title: Runtime format strings
Shortname: P2905
Revision: 2
Audience: LWG
Status: P
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2023-07-23
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
  ins { text-decoration: none; }
  ins code { background: #cfc !important; }

  .poll th, .poll td {
    text-align: right;
    width: 20%;
  }
</style>

<p style="text-align: right">
"Temporary solutions often become permanent problems." â€” Craig Bruce
</p>

Introduction {#intro}
============

[[P2216]] "std::format improvements" introduced compile-time format string
checks which, quoting Barry Revzin, "is a fantastic feature" ([[P2757]]).
However, due to resource constraints it didn't provide a good API for using
formatting functions with format strings not known at compile time.
As a workaround one could use type-erased API which has never been designed
for that. This severely undermined safety and led to poor user experience.
This paper fixes the safety issue and its companion paper [[P2918]] proposes
direct support for runtime format strings which has been long available in the
{fmt} library.

Problems {#problems}
========

[[P2216]] "std::format improvements" introduced compile-time format string
checks for `std::format`. This obviously requires format strings be known at
compile time. However, there are some use cases where format strings are only
known at runtime, e.g. when translated through gettext ([[GETTEXT]]).
One possible workaround is using type-erased formatting functions such as
`std::vformat`:

```c++
std::string str = translate("The answer is {}.");
std::string msg = std::vformat(str, std::make_format_args(42));
```

This is not a great user experience because the type-erased API was designed
to avoid template bloat and should only be used by formatting function writers
and not by end users.

Such misuse of the API also introduces major safety issues illustrated in the
following example:

<!-- https://godbolt.org/z/xMnbY8rMj -->
```c++
std::string str = "{}";
std::filesystem::path path = "path/etic/experience";
auto args = std::make_format_args(path.string());
std::string msg = std::vformat(str, args);
```

This innocent-looking code exhibits undefined behavior because format arguments
store a reference to a temporary which is destroyed before use. This has been
discovered and fixed in [[FMT]] which now rejects such code at compile time.

Changes since R1 {#changes0}
================

* Added LEWG poll results for R1.

Changes since R0 {#changes0}
================

* Moved the API for direct runtime format string support to a separate paper
    [[P2918]] per LEWG feedback.
* Removed forwarding in `print` per LEWG feedback.

Polls {#polls}
=====

<!-- https://docs.google.com/document/d/1bTtXiuN-1V9ksEzgeUyIEfqQZe5fstd6dfRkr7p_-p0/edit -->
LEWG poll results for R0:

**POLL**: In P2905R0 split `runtime_format` and `make_format_args` (add fix for
`print`) into separate papers, the latter being a DR against C++23.

```
SF  F  N  A SA
 5 10  4  0  0
```

**Outcome**: Strong Consensus in Favor

LEWG poll results for R1:

**POLL**: Send P2905R1 (Runtime Format Strings) to electronic balloting to be
forwarded to library for C++26, with the intention to retroactively apply the
paper to C++23.

```
SF  F  N  A SA
 4  7  0  0  0
```

**Outcome**: Unanimous consent in favor.

Proposal {#proposal}
========

This paper proposes changing `make_format_args` to take lvalue references
instead of forwarding references, rejecting problematic code:

```
std::filesystem::path path = "path/etic/experience";
auto args = std::make_format_args(path.string()); // ill-formed
```

This has been implemented in {fmt} catching some bugs even though the
pattern of using `make_format_args` has never been suggested as a way to pass
runtime format strings there. If left unchanged this will be a major safety
hole in the standard formatting facility.

In the standard itself `make_format_args` is already called with lvalue
references in `format`, e.g.
[[format.functions](http://eel.is/c++draft/format#functions-2)]:

```
template<class... Args>
  string format(format_string<Args...> fmt, Args&&... args);
```

*Effects*: Equivalent to:
```
  return vformat(fmt.str, make_format_args(args...));
```

Notice that there is intentionally no forwarding of `args` so the switch from
forwarding to lvalue references is effectively a noop there.

There is forwarding in the definitions on recently added `print` functions
(e.g. [[print.fun](https://eel.is/c++draft/input.output#print.fun-2)])
which is unnecessary and inconsistent with `format`. Removing fowarding there is
not observable.

Impact on existing code {#impact}
=======================

Rejecting temporaries in `make_format_args` is an (intentionally)
breaking change.

Searching GitHub for calls of `std::make_format_args` using the following query

```
"std::make_format_args" language:c++ -path:libstdc -path:libcxx -path:include/c++ 
```

returned only 844 results at the time of writing. For comparison, similar
search returned 165k results for `fmt::format` and 7.3k for `std::format`.
Such low usage is not very surprising because `std::format` is not widely
available yet.

At least 452 of these call sites use `make_format_args` as intended and will
require no changes:

```
std::vformat_to(std::back_inserter(c), fmt.get(), std::make_format_args(args...));
```

72 of remaining calls can be trivially fixed by removing unnecessary forwarding.

This leaves only 320 cases most of which will continue to work and the ones
that pass temporaries can be easily fixed by either switching to
`std::runtime_format` or by storing a temporary in a variable.

Wording {#wording}
=======

Change in [[format.syn](https://eel.is/c++draft/format#syn)]:

<pre>
namespace std {
  ...

  template&lt;class Context = format_context, class... Args>
    format-arg-store&lt;Context, Args...>
      make_format_args(Args&<del>&</del>... fmt_args);
  template&lt;class... Args>
    format-arg-store&lt;wformat_context, Args...>
      make_wformat_args(Args&<del>&</del>... args);

  ...
}
</pre>

Change in [[format.arg.store](https://eel.is/c++draft/format#arg.store)]:

<pre>
template&lt;class Context = format_context, class... Args>
  format-arg-store&lt;Context, Args...> make_format_args(Args&<del>&</del>... fmt_args);
</pre>

2 *Preconditions*:
The type <code>typename Context::template
formatter_type&lt;remove_<del>cvref</del><ins>const</ins>_t&lt;T&gt;<sub>i</sub>></code> meets the
<i>BasicFormatter</i> requirements ([formatter.requirements]) for each
<code>T<sub>i</sub></code> in `Args`.

...

<pre>
template&lt;class... Args>
  format-arg-store&lt;wformat_context, Args...> make_wformat_args(Args&<del>&</del>... args);
</pre>

Change in [[print.fun](https://eel.is/c++draft/print.fun#2)]:

<pre>
template&lt;class... Args>
  void print(FILE* stream, format_string&lt;Args...> fmt, Args&&... args);
</pre>

2 *Effects*: If the ordinary literal encoding ([lex.charset]) is UTF-8, equivalent to:

<pre>
vprint_unicode(stream, fmt.str, make_format_args(<del>std::forward&lt;Args>(args)...</del><ins>args...</ins>));
</pre>

Otherwise, equivalent to:

<pre>
vprint_nonunicode(stream, fmt.str, make_format_args(<del>std::forward&lt;Args>(args)...</del><ins>args...</ins>));
</pre>

Change in [[ostream.formatted.print](https://eel.is/c++draft/input.output#ostream.formatted.print-1)]:

<pre>
template&lt;class... Args>
  void print(ostream& os, format_string&lt;Args...> fmt, Args&&... args);
</pre>

1 *Effects*: If the ordinary literal encoding ([lex.charset]) is UTF-8, equivalent to:

<pre>
vprint_unicode(os, fmt.str, make_format_args(<del>std::forward&lt;Args>(args)...</del><ins>args...</ins>));
</pre>

Otherwise, equivalent to:

<pre>
vprint_nonunicode(os, fmt.str, make_format_args(<del>std::forward&lt;Args>(args)...</del><ins>args...</ins>));
</pre>

Implementation {#impl}
==============

The proposed API has been implemented in the {fmt} library ([[FMT]]).

<pre class=biblio>
{
  "FMT": {
    "title": "The fmt library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  },
  "GETTEXT": {
    "title": "gettext",
    "authors": ["Free Software Foundation"],
    "href": "https://www.gnu.org/software/gettext/"
  },
  "P2216": {
    "title": "std::format improvements",
    "authors": ["Victor Zverovich"],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html"
  },
  "p2757": {
    "title": "Type-checking format args",
    "authors": ["Barry Revzin"],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2757r1.html"
  },
  "P2918": {
    "title": "Runtime format strings II",
    "authors": ["Victor Zverovich"],
    "href": "https://isocpp.org/files/papers/P2918R0.html"
  }
}
</pre>
