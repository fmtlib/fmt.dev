<pre class='metadata'>
Title: Formatting of std::filesystem::path
Shortname: P2845
Revision: 0
Audience: SG16
Status: D
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2023-04-14
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
	ins { text-decoration: none; }
  ins code { background: #cfc !important; }

  .poll th, .poll td {
		text-align: right;
    width: 20%;
	}
</style>

<p style="text-align: right">
"The Tao is constantly moving, the path is always changing."
― Lao Tzu
</p>

Introduction {#intro}
============

[[P1636]] "Formatters for library types" proposed adding a number of
`std::formatter` specializations, including the one for `std::filesystem::path`.
However, SG16 recommended removing it because of quoting and localization
concerns. The current paper addresses these concerns and proposes adding an
improved `std::formatter` specialization for `path`.

Problems {#problems}
========

[[P1636]] proposed defining a `formatter` specialization for `path` in terms
of the `ostream` insertion operator which, in turn, formats the native
representation wrapped in `quoted`. For example:

```c++
std::cout << std::format("{}, std::filesystem::path("/usr/bin"));
```
would print `"/usr/bin"` with quotes being part of the output.

Unfortunately this has a number of problems, some of them raised in the LWG
discussion of the paper.

First, `std::quoted` only escapes the delimiter (`"`) and the escape character
itself (<code>\</code>). As a result the output may not be usable if the path contains
control characters such as newlines. For example:

```c++
std::cout << std::format("{}", std::filesystem::path("multi\nline"));
```

would print

```text
"multi
line"
```
which is not a valid string in C++ and many other languages, most importantly
including shell languages. Such output is pretty much unusable and
interferes with formatting of ranges of paths.

Another problem is encoding. The `native` member function returns
`basic_string<value_type>` where

> `value_type` is a `typedef` for the operating system dependent encoded
> character type used to represent pathnames.

`value_type` is normally `char` on POSIX and `wchar_t` on Windows.

This function may perform encoding conversion per [[fs.path.type.cvt](
http://eel.is/c++draft/fs.path.type.cvt)].

On POSIX, when the target code unit type is `char` no conversion is normally
performed:

> For POSIX-based operating systems `path::value_type` is `char` so no
> conversion from `char` value type arguments or to `char` value type return
> values is performed.

This usually gives the desired result.

On Windows, when the target code unit type is `char` the encoding conversion
would result in invalid output. For example, trying to print the following path
in Belarusian

```c++
std::print("{}\n", std::filesystem::path(L"Шчучыншчына"));
```

would result in the following output in the Windows console even though all code
pages and localization settings are set to Belarusian and both the source and
literal encodings are UTF-8:

```
"�����������"
```

The problem is that despite `print` and `path` both support Unicode the
intermediate conversion goes through CP1251 (the code page used for Belarusian)
which is not even valid for printing in the console which uses legacy CP866.
This has been discussed at length in [[P2093]] "Formatted output".

Proposal {#proposal}
========

Both of the problems discussed in the previoius section have already been
solved. The escaping mechanism that can handle invalid code units has been
introduced in [[P2286]] "Formatting Ranges" and encoding issues have been
addressed in [[P2093]] and other papers. We apply those solutions to the
formatting of paths.

This paper proposes adding a `formatter` specialization for `path` that does
escaping similarly to [[P2286]] and Unicode transcoding on Windows.

<!-- https://godbolt.org/z/WK4oKvWoj -->

<table>
<tr>
  <th>Code
  <th>Before
  <th>After
</tr>
<tr>
<td>
```
auto p = std::filesystem::path("multi\nline");
std::cout << std::format("{}", p);
```
<td>
```text
"multi
line"
```
<td>
```text
"multi\nline"
```
</tr>
<tr>
<td>
```
// On Windows with UTF-8 as a literal encoding.
auto p = std::filesystem::path(L"Шчучыншчына");
std::print("{}\n", p);
```
<td>
```text
"�����������"
```
<td>
```text
"Шчучыншчына"
```
</tr>
</table>

This leaves only one question of how to handle invalid Unicode. Plain strings
handle them by formatting ill-formed code units as hexadecimal escapes, e.g.

```c++
// invalid UTF-8, s has value: ["\x{c3}("]
std::string s = std::format("[{:?}]", "\xc3\x28");
```

This is useful because it doesn't loose any information. But in case of paths
it is a bit more complicated because the string is in a different forms and
the mapping between ill-formed code units in one form to another may not be
well-defined.

The current paper proposes applying hexadecimal escapes to the original
ill-formed data because it gives more intuitive result and doesn't require
picking non-standard mappings such as WTF-8 ([[WTF]]).

For example:
```c++
auto p = std::filesystem::path(L"\xd800"); // a lone surrogate
std::print("{}\n", p);
```
prints
```text
"\x{d800}"
```

TODO: implement handling of invalid Unicode

Wording {#wording}
=======

Add to "Header &lt;filesystem> synopsis" [[fs.filesystem.syn](
https://eel.is/c++draft/fs.filesystem.syn)]:

```
// [fs.path.fmt], formatter
template<class charT> struct formatter<filesystem::path, charT>;
```

Add a new section "Formatting" [fs.path.fmt] under "Class path"
[[fs.class.path](https://eel.is/c++draft/fs.class.path)]:

```
template<class charT> struct formatter<filesystem::path, charT> {
  constexpr format_parse_context::iterator parse(format_parse_context& ctx);

  template<class FormatContext>
    typename FormatContext::iterator
      format(filesystem::path& path, FormatContext& ctx) const;
};
```

```
constexpr format_parse_context::iterator parse(format_parse_context& ctx);
```

TODO: define parse and format

Implementation {#impl}
==============

The proposed `formatter` for `std::filesystem::path` has been implemented in
{fmt} ([[FMT]]).

<pre class=biblio>
{
  "P1636": {
    "title": "Formatters for library types",
    "authors": "Lars Gullik Bjønnes",
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1636r2.pdf"
  },
  "P2093": {
    "title": "Formatted output",
    "authors": "Victor Zverovich",
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html"
  },
  "P2286": {
    "title": "Formatting Ranges",
    "authors": "Barry Revzin",
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html"
  },
  "FMT": {
    "title": "The fmt library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  },
  "WTF": {
    "title": "The WTF-8 encoding",
    "authors": "Simon Sapin",
    "href": "https://simonsapin.github.io/wtf-8/"
  }
}
</pre>
