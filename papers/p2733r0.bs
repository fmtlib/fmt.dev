<pre class='metadata'>
Title: Clarify handling of empty specifiers in std::format
Shortname: P2733
Revision: 0
Audience: LEWG
Status: P
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2022-11-26
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
	ins { text-decoration: none; }
  ins code { background: #cfc !important; }
  .parnum {
    display: block;
    height: 0;
    position: relative;
    left: -24px;
    font-size: small;
  }
</style>

Proposal {#proposal}
========

<!-- https://github.com/cplusplus/papers/issues/1314 -->

[[LWG3776]] "Avoid parsing format-spec if it is not present or empty" proposed
omitting the call to `formatter::parse` for empty format specifiers
(*format-spec* in [[format.string.general](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=794)] of
[[N4917]]).

Consider the following example:

```
struct S {};

template <>
struct std::formatter<S> {
  auto parse(format_parse_context& ctx) { return ctx.begin(); }
  auto format(S, format_context& ctx) const { return ctx.out(); }
};

int main() {
  auto s1 = fmt::format("{}", S());  // (1) no format-spec
  auto s2 = fmt::format("{:}", S()); // (2) empty format-spec
}
```
<!-- https://godbolt.org/z/z4oeYM3Tb -->

In (1) *format-spec* is not present and in (2) it is present but empty.
There is nothing to parse in both of these cases and therefore requiring 
implementations to call `formatter::parse` doesn't make a lot of sense.
It only adds unnecessary overhead for the common case which is what [[LWG3776]]
was proposing to eliminate. Implementation experience in {fmt} showed that it
has negative impact on formatting of ranges that have to unnecessarily call
`parse` from multiple places. The same issue may exist in other contexts such
as format string compilation.

Additionally [[LWG3776]] made a drive-by fix clarifying that the two cases are
equivalent which was not obvious from existing wording. This is arguably even
more important than omitting `parse`, particularly because formatting of ranges
([[P2286]]) doesn't allow distinguishing between the two forms for nested
specifiers, e.g.

```
auto s = std::format("{::}", std::vector<S>(2));
//                       ^ empty format-spec for S
```

Library Evolution Working Group (LEWG) reviewed [[LWG3776]] in Kona and
approved it with the amendment that implementations are allowed but not required
to omit the call to `formatter::parse` for empty *format-spec*.

Barry Revzin pointed out existing limitation of the formatting ranges design
that requires calling `set_debug_format` from the `parse` function. However,
as discovered by Mark de Wever while implementing ranges formatting in libc++,
the `formatter` specialization for tuples already omits the call to `parse`
for the underlying type so we need to fix this anyway.

This paper amends the proposed resolution of [[LWG3776]] per LEWG feedback and
makes the necessary changes to the `set_debug_format` API. It has been
implemented in [[FMT]].

LEWG Poll Results {#poll-results}
=================

**POLL**: Relax the requirements table 74 and 75 to make the optimization allowed
by the issue resolution of LWG3776 a QoI issue with additional changes to the
handle class removed

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>1
  <td>9
  <td>2
  <td>1
  <td>1
</tr>
</table>

**Outcome**: consensus in favour

**POLL**: Adopt the amended proposed resolution of LWG3776 "Avoid parsing
format-spec if it is not present or empty". Return the issue to LWG for C++23
(to be confirmed by electronic polling)

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>2
  <td>6
  <td>1
  <td>2
  <td>1
</tr>
</table>

**Outcome**: weak consensus in favour

Wording {#wording}
=======

This wording is relative to [[N4917]].

Modify 22.14.6.1 [[formatter.requirements](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=802)]
as indicated:

-3- Given character type `charT`, output iterator type `Out`, and formatting
argument type `T`, in Table 74 and Table 75:

...

`pc.begin()` points to the beginning of the *format-spec* (22.14.2
[format.string]) of the replacement field being formatted in the format string.
If *format-spec* is <ins>not present or</ins> empty then either
`pc.begin() == pc.end()` or `*pc.begin() == '}'`.

Modify *BasicFormatter* requirements [[tab:formatter.basic](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=803)]
as indicated:

<table>
<tr>
  <th>Expression
  <th>Return type
  <th>Requirement
</th>
<tr>
  <td>`f.format(u, fc)`
  <td>`FC::iterator`
  <td>Formats `u` according to the specifiers stored in
      `*this`, writes the output to `fc.out()`, and returns
      an iterator past the end of the output range.
      The output shall only depend on `u`, `fc.locale()`,
      `fc.arg(n)` for any value `n` of type `size_t`, and
      the range `[pc.begin(), pc.end())` from the last
      call to `f.parse(pc)`. <ins>When the *format-spec*
      (22.14.2 [format.string]) is not present or empty
      the call to `f.parse(pc)` may be omitted.</ins>
</tr>
</table>

TODO: remainder of the proposed resolution and ranges fix

<pre class=biblio>
{
  "LWG3776": {
    "title": "Avoid parsing format-spec if it is not present or empty",
    "authors": "Mark de Wever",
    "href": "https://cplusplus.github.io/LWG/issue3776"
  },
  "N4917": {
    "title": "Working Draft, Standard for Programming Language C++",
    "authors": "Thomas KÃ¶ppe",
    "etAl": true,
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf"
  },
  "P2286": {
    "title": "Formatting Ranges",
    "authors": "Barry Revzin",
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html"
  },
  "FMT": {
    "title": "The fmt library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  }
}
</pre>
