<pre class='metadata'>
Title: Formatting of std::error_code
Shortname: P395
Revision: 0
Audience: SG16
Status: P
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2024-09-21
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
  ins { text-decoration: none; }
  ins code { background: #cfc !important; }

  .poll th, .poll td {
    text-align: right;
    width: 20%;
  }
</style>

Introduction {#intro}
============

This paper proposes making `std::error_code` formattable with the formatting
facility added in C++20 (`std::format`).

Motivation {#motivation}
==========

`error_code` has a rudimentary `ostream` inserter. For example:

```
std::error_code ec;
auto size = std::filesystem::file_size("nonexistent", ec);
std::cout << ec;
```

works and prints `generic:2`.

However, the following code doesn't compile:

```
std::print("{}\n", ec);
```

Unfortunately, the existing inserter has obvious issues such as I/O manipulators
applying only to the category name and not to the whole error code leading to
confusing output:

```
std::cout << std::left << std::setw(12) << ec;
```

prints

```
generic     :2
```

It also doesn't allow formatting the error message and has potential encoding
issues because the encoding of category name is unspecified.

Proposal {#proposal}
========

The current paper proposes adding a `formatter` specialization for `error_code`
that addresses the problems discussed in the previous section.

The default format will give the same output as the `ostream` inserter:

```
std::print("{}\n", ec);
```

Output:

```
generic:2
```

It will correctly handle width and alignment:

```
std::print("{:>12}\n", ec);
```

Output:

```
   generic:2
```

It will also allow formatting the error message:

```
std::print("{:s}\n", ec);
```

Output:

```
No such file or directory
```

(The actual message depends on the platform.)

The main challenge is that the standard doesn't specify the encodings of
strings returned by `error_category::name` and `error_code::message` / 
`error_category::message` ([syserr.errcat.virtuals](
https://eel.is/c++draft/syserr.errcat.virtuals)):

```
virtual const char* name() const noexcept = 0;
```

*Returns*: A string naming the error category.

```
virtual string message(int ev) const = 0;
```

*Returns*: A string that describes the error condition denoted by `ev`.

In practice implementations define category names as string literals and
therefore they are in ordinary literal encoding.

<!-- https://github.com/llvm/llvm-project/blob/8f31ee996ae21ee77db29abb02a3aef4750e6d35/libcxx/src/system_error.cpp#L161 -->
<!-- https://github.com/gcc-mirror/gcc/blob/20486ec75734f3e641a3ade4297f6ba64881bca8/libstdc%2B%2B-v3/src/c%2B%2B11/system_error.cc#L589 -->
<!-- https://github.com/gcc-mirror/gcc/blob/20486ec75734f3e641a3ade4297f6ba64881bca8/libstdc%2B%2B-v3/src/c%2B%2B11/system_error.cc#L589 -->

There is implementation divergence in the encoding for messages. libc++ and
libstdc++ use `strerror[_r]` for the generic category which is in the C
(not "C") locale encoding but disagree on encodings for the system category:
libstdc++ uses the Active Code Page (ACP) while libc++ again uses `strerror`
/ C locale on Windows. Microsoft STL uses a table of string literals in the
ordinary literal encoding for the generic category and ACP for the system
category. The following table summarizes this:

<table>
<tr>
  <td>
  <td>libstdc++
  <td>libc++
  <td>Microsoft STL
</tr>
<tr>
  <td>POSIX
  <td>`strerror`
  <td>`strerror`
  <td>N/A
</tr>
<tr>
  <td>Windows
  <td>`strerror` / ACP
  <td>`strerror`
  <td>ordinary literals / ACP
</tr>
</table>

Obviously none of this is usable in a portable way through the generic
`error_category` API because encodings can be and often are different.
What is worse, is that it is impossible to reliably get the information about
the message encoding because both the C locale and ACP can be changed at
runtime, possibly from another thread.

<!-- This particularly embarassing considering
that most system have APIs for this available for over a decade - strerror_l -->

TODO: solution for this mess

// TODO: check if locale can be changed from another thread

#include <locale.h>
#include <string.h>
#include <iostream>

int main() {
  std::cout << setlocale(LC_ALL, nullptr) << std::endl;
  // By default locale is not affected by LC_ALL.
  setlocale(LC_ALL, "uk_UA.koi8-u");
  std::cout << strerror(2) << std::endl;
}

<!-- ABI: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1196r0.html -->

Implementation {#impl}
==============

The proposed `formatter` for `std::error_code` has been implemented in the
open-source {fmt} library ([[FMT]]).

<pre class=biblio>
{
  "FMT": {
    "title": "The {fmt} library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  }
}
</pre>
