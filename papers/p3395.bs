<pre class='metadata'>
Title: Fix encoding issues and add a formatter for std::error_code
Shortname: P3395
Revision: 5
Audience: LEWG
Status: P
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2025-04-27
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
  ins { text-decoration: none; }
  ins code { background: #cfc !important; }

  .poll th, .poll td {
    text-align: right;
    width: 20%;
  }
</style>

Introduction {#intro}
============

This paper proposes making `std::error_code` formattable using the formatting
facility introduced in C++20 (`std::format`) and fixes encoding issues in the
underlying API ([[LWG4156]]).

Changes since R4 {#changes4}
================

- Fixed handling of `wchar_t` in the wording, making it consistent with the one
    from `std::filesystem::path`.
- Clarify ABI implications of future changes.
- Clarify why debug format applies to the whole error code.

Changes since R3 {#changes3}
================

- Added LEWG poll results for R3.
- Fixed a typo in the wording.
- Fixed wording for the debug output.
- Clarify why the format specifier for value is not provided.

Changes since R2 {#changes2}
================

- Added a reference to [[P2930]] and how it differs from the current proposal.

Changes since R1 {#changes1}
================

- Added a debug format to avoid ambiguity when formatting error codes in maps.
- Added SG16 poll results.

Changes since R0 {#changes0}
================

- Changed the title from "Formatting of std::error_code" to "Fix encoding
    issues and add a formatter for std::error_code" to reflect the fact that
    the paper also fixes [[LWG4156]].
- Specified that `error_category::name()` returns a string the ordinary literal
    encoding per SG16 feedback.
- Made transcoding in `error_category::message()` implementation-defined if the
    literal encoding is not UTF-8 per SG16 feedback and for consistency with
    other similar cases in the standard.

Polls {#polls}
=====

LEWG poll results for R3:

**POLL**: P3395 should explore format specifier support to define which
information (error number/category/message) to format.

```text
SF  F  N  A SA
 1  9  4  2  0
```

Outcome: Consensus in favour

SG16 poll results for R0:

**POLL**: Forward P3395R0 to LEWG amended to specify an encoding for
`std::error_category::name()` and for transcoding to be to UTF-8 if that
matches the ordinary literal encoding and to an implementation-defined encoding
otherwise.

```text
SF  F  N  A SA
 1  6  0  0  0
```

Outcome: Strong consensus

Motivation {#motivation}
==========

<!-- TODO: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2930r0.html#error_code -->

`error_code` has a rudimentary `ostream` inserter. For example:

```
std::error_code ec;
auto size = std::filesystem::file_size("nonexistent", ec);
std::cout << ec;
```

This works and prints `generic:2`.

However, the following code doesn't compile:

```
std::print("{}\n", ec);
```

Unfortunately, the existing inserter has several issues, such as I/O
manipulators applying only to the category name rather than the entire error
code, resulting in confusing output:

```
std::cout << std::left << std::setw(12) << ec;
```

This prints:

```text
generic     :2
```

Additionally, it doesn’t allow formatting the error message and introduces
potential encoding issues, as the encoding of the category name is unspecified.

Proposal {#proposal}
========

This paper proposes adding a `formatter` specialization for `std::error_code`
to address the problems discussed in the previous section.

The default format will produce the same output as the `ostream` inserter:

```
std::print("{}\n", ec);
```

Output:

```text
generic:2
```

It will correctly handle width and alignment:

```
std::print("[{:>12}]\n", ec);
```

Output:

```text
[   generic:2]
```

Additionally, it will allow formatting the error message:

```
std::print("{:s}\n", ec);
```

Output:

```text
No such file or directory
```

(The actual message depends on the platform.)

The main challenge lies in the standard's lack of specification for the
encodings of strings returned by `error_category::name` and
`error_code::message` / `error_category::message` ([syserr.errcat.virtuals](
https://eel.is/c++draft/syserr.errcat.virtuals)):

```
virtual const char* name() const noexcept = 0;
```

*Returns*: A string naming the error category.

```
virtual string message(int ev) const = 0;
```

*Returns*: A string that describes the error condition denoted by `ev`.

In practice, implementations typically define category names as string literals,
meaning they are in the ordinary literal encoding. 

<!-- https://github.com/llvm/llvm-project/blob/8f31ee996ae21ee77db29abb02a3aef4750e6d35/libcxx/src/system_error.cpp#L161 -->
<!-- https://github.com/gcc-mirror/gcc/blob/20486ec75734f3e641a3ade4297f6ba64881bca8/libstdc%2B%2B-v3/src/c%2B%2B11/system_error.cc#L589 -->
<!-- https://github.com/gcc-mirror/gcc/blob/20486ec75734f3e641a3ade4297f6ba64881bca8/libstdc%2B%2B-v3/src/c%2B%2B11/system_error.cc#L589 -->

However, there is significant divergence in message encodings. libc++ and
libstdc++ use `strerror[_r]` for the generic category which is in the C
(not "C") locale encoding but disagree on the encoding for the system category:
libstdc++ uses the Active Code Page (ACP) while libc++ again uses `strerror`
/ C locale on Windows. Microsoft STL uses a table of string literals in the
ordinary literal encoding for the generic category and ACP for the system
category.

The following table summarizes the differences:

<table>
<tr>
  <td>
  <td>libstdc++
  <td>libc++
  <td>Microsoft STL
</tr>
<tr>
  <td>POSIX
  <td>`strerror`
  <td>`strerror`
  <td>N/A
</tr>
<tr>
  <td>Windows
  <td>`strerror` / ACP
  <td>`strerror`
  <td>ordinary literals / ACP
</tr>
</table>

Obviously none of this is usable in a portable way through the generic
`error_category` API because encodings can be and often are different.

<!--What is worse, it is impossible to reliably get the information about the
message encoding because both the C locale and ACP can be changed at runtime,
possibly from another thread.

```c++
#include <locale.h>
#include <string.h>
#include <iostream>
#include <thread>

int main() {
  // Initial locale is "C".
  std::cout << setlocale(LC_ALL, nullptr) << std::endl;

  std::thread t([]() {
    setlocale(LC_ALL, "uk_UA.koi8-u");
  });

  t.join();
  std::cout << strerror(2) << std::endl;

  // ./a.out | iconv -f KOI8-U -t UTF-8
  // C
  // Немає такого файла або каталогу
}
```
-->

To address this, the proposal suggests using the C locale encoding (execution
character set), which is already employed in most cases and aligns with
underlying system APIs. Microsoft STL's implementation has a number of bugs in
`std::system_category::message` ([[MSSTL-3254]], [[MSSTL-4711]]) and will
likely need to change anyway. This also resolves [[LWG4156]].

An alternative approach could involve communicating the encoding from
`error_category`. However, this introduces ABI challenges and complicates usage
compared to adopting a single encoding.

<!-- ABI: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1196r0.html -->

A specifier for an error code’s value is intentionally not provided because it
is of limited use without the associated category information. Moreover, the
value can be easily accessed and formatted using other means, for example:

```c++
std::print("{}\n", ec.value());
```

This functionality is not currently provided by {fmt}, and over several years
of usage, there have been no requests to add it. However, if sufficient demand
emerges, it could be considered for future inclusion. Even if there are ABI
implications to such extensions, since the current proposal is targeting C++29,
there is plenty of time to do this.

The current proposal provides the debug format for `error_code`. The main
for that is that the `:` separating the error category and code can be confused
with `:` separating keys and values in a map. For example:

```c++
std::print("{}", std::map<std::error_code, int>{{std::error_code{}, 1}});
```
would be printed as
```
{system:0: 1}
```
without debug format and as
```
{"system:0": 1}
```
with.

This is also one of the reasons why quotation applies to the whole error code
and not just error category.

Previous work {#previous}
=============

A formatter for `std::error_code` was proposed as part of [[P2930]] which
has more formatting options for the numeric code but doesn't try to address
encoding issues or provide a debug format.

Wording {#wording}
=======

Add to "Header &lt;system_error> synopsis" [[system.error.syn](
https://eel.is/c++draft/system.error.syn)]:

```
// [system.error.fmt], formatter
template<class charT> struct formatter<error_code, charT>;
```

Add a new section "Formatting" [system.error.fmt] under "Class `error_code`"
[[syserr.errcode](https://eel.is/c++draft/syserr.errcode)]:

<pre>
template&lt;class charT> struct formatter&lt;error_code, charT> {
  constexpr void set_debug_format();

  constexpr typename basic_format_parse_context&lt;charT>::iterator
    parse(basic_format_parse_context&lt;charT>& ctx);

  template&lt;class FormatContext>
    typename FormatContext::iterator
      format(const error_code& ec, FormatContext& ctx) const;
};
</pre>

```
constexpr void set_debug_format();
```

*Effects*: Modifies the state of the `formatter` to be as if the
*error-code-format-spec* parsed by the last call to `parse` contained the
`?` option.

```
constexpr typename basic_format_parse_context<charT>::iterator
  parse(basic_format_parse_context<charT>& ctx);
```

*Effects*: Parses the format specifier as a *error-code-format-spec* and stores the
parsed specifiers in `*this`.

<i>error-code-format-spec</i>:<br>
&nbsp;&nbsp;<i>fill-and-align<sub>opt</sub></i> <i>width<sub>opt</sub></i>
<code>?</code><i><sub>opt</sub></i> <code>s</code><i><sub>opt</sub></i>

where the productions <i>fill-and-align</i> and <i>width</i> are described in
[[format.string](http://eel.is/c++draft/format#string)].

*Returns*: An iterator past the end of the *error-code-format-spec*.

<pre>
  template&lt;class FormatContext>
    typename FormatContext::iterator
      format(const error_code& ec, FormatContext& ctx) const;
</pre>

*Effects*: If the `s` option is used, then:

- If `charT` is `char` and the ordinary literal encoding is UTF-8, then let
    `msg` be `ec.message()` transcoded to UTF-8 with maximal subparts of
    ill-formed subsequences substituted with U+FFFD REPLACEMENT CHARACTER per
    the Unicode Standard, Chapter 3.9 U+FFFD Substitution in Conversion.
- Otherwise, let `msg` be `ec.message()` transcoded to an implementation-defined
    encoding.

Otherwise, let `msg` be `format("{}:{}", ec.category().name(), ec.value())`.

Writes `msg` into `ctx.out()`, adjusted according to the
*error-code-format-spec*. If the `?` option is used then `msg` is formatted as
an escaped string ([[format.string.escaped](
http://eel.is/c++draft/format.string.escaped)]).

*Returns*: An iterator past the end of the output range.

Modify [[syserr.errcat.virtuals](
https://eel.is/c++draft/syserr.errcat.virtuals)]:

```
virtual const char* name() const noexcept = 0;
```

*Returns*: A string <ins>in the ordinary literal encoding</ins> naming the
error category.

...

```
virtual string message(int ev) const = 0;
```

*Returns*: A string <ins>of multibyte characters in the execution character
set</ins> that describes the error condition denoted by `ev`.

Implementation {#impl}
==============

The proposed `formatter` for `std::error_code` has been implemented in the
open-source {fmt} library ([[FMT]]).

<pre class=biblio>
{
  "FMT": {
    "title": "The {fmt} library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  },
  "LWG4156": {
    "title": "`error_category` messages have unspecified encoding",
    "authors": ["Victor Zverovich"],
    "href": "https://cplusplus.github.io/LWG/issue4156"
  },
  "MSSTL-3254": {
    "title": "Visual Studio 2022 std::system_category returns \"unknown error\" if system locale is not en-US",
    "href": "https://github.com/microsoft/STL/issues/3254"
  },
  "MSSTL-4711": {
    "title": "Should `std::error_code::message` respect the locale set by the user?",
    "authors": ["Sung Po-Han"],
    "href": "https://github.com/microsoft/STL/issues/4711"
  },
  "P2930": {
    "title": "Formatter specializations for the standard library",
    "authors": ["Mark de Wever"],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2930r0.html"
  }
}
</pre>
