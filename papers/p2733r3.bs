<pre class='metadata'>
Title: Fix handling of empty specifiers in std::format
Shortname: P2733
Revision: 3
Audience: LEWG
Status: D
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
Editor: Mark de Wever, koraq@xs4all.nl
No abstract: true
Date: 2023-02-09
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
	ins { text-decoration: none; }
  ins code { background: #cfc !important; }
  .parnum {
    display: block;
    height: 0;
    position: relative;
    left: -24px;
    font-size: small;
  }
</style>

Introduction {#intro}
============

This paper fixes a number of issues in range and tuple formatting related to
handling of empty specifiers for element types and clarifies that empty and not
present format specifiers are handled equivalently.
Originally it also amended the proposed resolution of [[LWG3776]] to allow
omitting calls to `formatter::parse` for empty specifiers per LEWG feedback but
this part was removed due to new LEWG feedback.

Changes from R2 {#changes2}
===============

* Switched to option S1, make range and tuple formatters provide
    `set_debug_format`, since LWG found issues with implementability of the
    previous solution.

Changes from R1 {#changes1}
===============

* Removed the permission to omit calls to `parse` for empty or missing
    format specifiers per new LEWG guidance.
* Added calls to `parse` for tuple element formatters.
* Clarified that *format-spec* cannot start with `}` per LWG feedback.
* Improved wording of `set_debug_format`.

Changes from R0 {#changes0}
===============

* Added a comparison with potential alternative resolutions of the nested
    range/tuple formatting bug.

Proposal {#proposal}
========

<!-- https://github.com/cplusplus/papers/issues/1314 -->

[[LWG3776]] "Avoid parsing format-spec if it is not present or empty" proposed
omitting the call to `formatter::parse` for empty format specifiers
(*format-spec* in [[format.string.general](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=794)] of
[[N4917]]).

Consider the following example:

```
struct S {};

template <>
struct std::formatter<S> {
  constexpr auto parse(format_parse_context& ctx) { return ctx.begin(); }
  auto format(S, format_context& ctx) const { return ctx.out(); }
};

int main() {
  auto s1 = std::format("{}", S());  // (1) no format-spec
  auto s2 = std::format("{:}", S()); // (2) empty format-spec
}
```
<!-- https://godbolt.org/z/z4oeYM3Tb -->

In (1) *format-spec* is not present and in (2) it is present but empty.
There is nothing to parse in both of these cases and therefore requiring 
implementations to call `formatter::parse` doesn't make a lot of sense.
It only adds unnecessary overhead for the common case which is what [[LWG3776]]
was proposing to eliminate. Implementation experience in {fmt} showed that
requiring the call to `parse` has negative impact on formatting of ranges where
we had to unnecessarily call this function from multiple places. The same issue
may exist in other contexts such as format string compilation. In the tuple
case there aren't even nested format specifiers to call the underlying `parse`
on.

Additionally [[LWG3776]] made a drive-by fix, clarifying that the two cases are
equivalent which was not obvious from existing wording. This is arguably even
more important than omitting `parse`, particularly because formatting of ranges
([[P2286]]) doesn't allow distinguishing between the two forms for nested
specifiers, e.g.

```
auto s = std::format("{::}", std::vector<S>(2));
//                       ^ empty format-spec for S
```

Having the two cases equivalent is also more intuitive and consistent with all
existing standard formatters.

Library Evolution Working Group (LEWG) reviewed [[LWG3776]] in Kona and
approved it with the amendment that implementations are allowed but not required
to omit the call to `formatter::parse` for empty *format-spec*.

Barry Revzin pointed out an existing limitation of the formatting ranges design
that requires calling `set_debug_format` from the `parse` function. However,
as discovered by Mark de Wever while implementing ranges formatting in libc++,
the `formatter` specialization for tuples already omits the call to `parse`
for the underlying type so we need to fix this anyway. The following example
illustrates the fix:

```
auto s = fmt::format("{}", std::make_tuple(std::make_tuple('a')));
```

<table class="poll">
<tr>
  <th>Before
  <th>After
</th>
<tr>
  <td>`s == ((a))`
  <td>`s == (('a'))`
</tr>
</table>

Alternative resolutions for the nested range/tuple formatting bug are:

* Set range and tuple formtters to debug state in constuctors and make empty
    inner format spec override it (S0).
* Make range and tuple formatters provide `set_debug_format` (S1).
* Always call the underlying formatter `parse` function (S2).
* Default the output type of debug-enabled specializations in the constructor (S3).

The table below compares alternative solutions with the earlier version (R1) of
the current proposal denoted as S0:

<!-- https://godbolt.org/z/sszfT3Eh5 -->

<table style="width:100%">
<colgroup>
<col style="width:32%">
<col style="width:8%">
<col style="width:9%">
<col style="width:16%">
<col style="width:16%">
<col style="width:16%">
</colgroup>
<thead>
<tr class="m_header">
<th><div style="text-align:center">
Type
</div></th>
<th><div style="text-align:center">
Format
</div></th>
<th><div style="text-align:center">
Before
</div></th>
<th><div style="text-align:center">
S1 &amp; S2
</div></th>
<th><div style="text-align:center">
S3
</div></th>
<th><div style="text-align:center">
S0
</div></th>
</tr>
</thead>
<tbody>
<tr class="m_odd">
  <td>`char`</td>
  <td>`{}`</td>
  <td>`a`</td>
  <td>`a`</td>
  <td>`a`</td>
  <td>`a`</td>
</tr>
<tr class="m_even">
  <td>`char`</td>
  <td>`{:?}`</td>
  <td>`'a'`</td>
  <td>`'a'`</td>
  <td>`'a'`</td>
  <td>`'a'`</td>
</tr>
<tr class="m_odd">
  <td>`vector<char>`</td>
  <td>`{}`</td>
  <td>`['a']`</td>
  <td>`['a']`</td>
  <td>`['a']`</td>
  <td>`['a']`</td>
</tr>
<tr class="m_even">
  <td>`vector<char>`</td>
  <td>`{::}`</td>
  <td>`[a]`</td>
  <td>`[a]`</td>
  <td><ins>`['a']`</ins></td>
  <td>`[a]`</td>
</tr>
<tr class="m_odd">
  <td>`vector<char>`</td>
  <td>`{::c}`</td>
  <td>`[a]`</td>
  <td>`[a]`</td>
  <td>`[a]`</td>
  <td>`[a]`</td>
</tr>
<tr class="m_even">
  <td>`vector<char>`</td>
  <td>`{::?}`</td>
  <td>`['a']`</td>
  <td>`['a']`</td>
  <td>`['a']`</td>
  <td>`['a']`</td>
</tr>
<tr class="m_odd">
  <td>`map<char, char>`</td>
  <td>`{}`</td>
  <td><code>{a:&nbsp;a}</code></td>
  <td><ins>`{'a': 'a'}`</ins></td>
  <td><ins>`{'a': 'a'}`</ins></td>
  <td><ins>`{'a': 'a'}`</ins></td>
</tr>
<tr class="m_even">
  <td>`set<char>`</td>
  <td>`{}`</td>
  <td>`{'a'}`</td>
  <td>`{'a'}`</td>
  <td>`{'a'}`</td>
  <td>`{'a'}`</td>
</tr>
<tr class="m_odd">
  <td>`set<char>`</td>
  <td>`{::}`</td>
  <td>`{a}`</td>
  <td>`{a}`</td>
  <td><ins>`{'a'}`</ins></td>
  <td>`{a}`</td>
</tr>
<tr class="m_even">
  <td>`set<char>`</td>
  <td>`{::c}`</td>
  <td>`{a}`</td>
  <td>`{a}`</td>
  <td>`{a}`</td>
  <td>`{a}`</td>
</tr>
<tr class="m_odd">
  <td>`set<char>`</td>
  <td>`{::?}`</td>
  <td>`{'a'}`</td>
  <td>`{'a'}`</td>
  <td>`{'a'}`</td>
  <td>`{'a'}`</td>
</tr>
<tr class="m_even">
  <td>`tuple<char>`</td>
  <td>`{}`</td>
  <td>`('a')`</td>
  <td>`('a')`</td>
  <td>`('a')`</td>
  <td>`('a')`</td>
</tr>
<tr class="m_odd">
  <td>`vector<vector<char>>`</td>
  <td>`{}`</td>
  <td>`[[a]]`</td>
  <td><ins>`[['a']]`</ins></td>
  <td><ins>`[['a']]`</ins></td>
  <td><ins>`[['a']]`</ins></td>
</tr>
<tr class="m_even">
  <td>`vector<vector<char>>`</td>
  <td>`{::}`</td>
  <td>`[['a']]`</td>
  <td>`[['a']]`</td>
  <td>`[['a']]`</td>
  <td>`[['a']]`</td>
</tr>
<tr class="m_odd">
  <td>`vector<vector<char>>`</td>
  <td>`{:::}`</td>
  <td>`[[a]]`</td>
  <td>`[[a]]`</td>
  <td><ins>`[['a']]`</ins></td>
  <td>`[[a]]`</td>
</tr>
<tr class="m_even">
  <td>`vector<vector<char>>`</td>
  <td>`{:::c}`</td>
  <td>`[[a]]`</td>
  <td>`[[a]]`</td>
  <td>`[[a]]`</td>
  <td>`[[a]]`</td>
</tr>
<tr class="m_odd">
  <td>`vector<vector<char>>`</td>
  <td>`{:::?}`</td>
  <td>`[['a']]`</td>
  <td>`[['a']]`</td>
  <td>`[['a']]`</td>
  <td>`[['a']]`</td>
</tr>
<tr class="m_even">
  <td>`vector<tuple<char>>`</td>
  <td>`{}`</td>
  <td>`[(a)]`</td>
  <td><ins>`[('a')]`</ins></td>
  <td><ins>`[('a')]`</ins></td>
  <td><ins>`[('a')]`</ins></td>
</tr>
<tr class="m_odd">
  <td>`tuple<tuple<char>>`</td>
  <td>`{}`</td>
  <td>`((a))`</td>
  <td><ins>`(('a'))`</ins></td>
  <td><ins>`(('a'))`</ins></td>
  <td><ins>`(('a'))`</ins></td>
</tr>
<tr class="m_even">
  <td>`tuple<vector<char>>`</td>
  <td>`{}`</td>
  <td>`([a])`</td>
  <td><ins>`(['a'])`</ins></td>
  <td><ins>`(['a'])`</ins></td>
  <td><ins>`(['a'])`</ins></td>
</tr>
<!-- tr class="m_odd">
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
</tr>
<tr class="m_even">
  <td>`nondebug_string`</td>
  <td>`{}`</td>
  <td>`a`</td>
  <td>`a`</td>
  <td>`a`</td>
  <td>`a`</td>
</tr>
<tr class="m_odd">
  <td>`nondebug_string`</td>
  <td>`{:s}`</td>
  <td>`a`</td>
  <td>`a`</td>
  <td>`a`</td>
  <td>`a`</td>
</tr>
<tr class="m_even">
  <td>`nondebug_string`</td>
  <td>{:?}</td>
  <td>“a”</td>
  <td>“a”</td>
  <td>“a”</td>
  <td>“a”</td>
</tr>
<tr class="m_odd">
  <td>`string`</td>
  <td>{}</td>
  <td>“a”</td>
  <td>“a”</td>
  <td>“a”</td>
  <td>“a”</td>
</tr>
<tr class="m_even">
  <td>`string`</td>
  <td>{:s}</td>
  <td>“a”</td>
  <td>“a”</td>
  <td><ins>a</ins></td>
  <td>“a”</td>
</tr>
<tr class="m_odd">
  <td>`string`</td>
  <td>{:?}</td>
  <td>“a”</td>
  <td>“a”</td>
  <td>“a”</td>
  <td>“a”</td>
</tr>
<tr class="m_even">
  <td>`map<nondebug_string, nondebug_string>`</td>
  <td>{}</td>
  <td>{a: a}</td>
  <td><ins>{“a”: “a”}</ins></td>
  <td><ins>{“a”: “a”}</ins></td>
  <td>{a: a}</td>
</tr>
<tr class="m_odd">
  <td>`map<string, string>`</td>
  <td>{}</td>
  <td>{a: a}</td>
  <td><ins>{“a”: “a”}</ins></td>
  <td><ins>{“a”: “a”}</ins></td>
  <td><ins>{“a”: “a”}</ins></td>
</tr>
<tr class="m_even">
  <td>`set<nondebug_string>`</td>
  <td>{}</td>
  <td>{a}</td>
  <td><ins>{“a”}</ins></td>
  <td><ins>{“a”}</ins></td>
  <td><ins>{“a”}</ins></td>
</tr>
<tr class="m_odd">
  <td>`set<nondebug_string>`</td>
  <td>{::}</td>
  <td>{a}</td>
  <td>{a}</td>
  <td><ins>{“a”}</ins></td>
  <td>{a}</td>
</tr>
<tr class="m_even">
  <td>`set<nondebug_string>`</td>
  <td>{::s}</td>
  <td>{a}</td>
  <td>{a}</td>
  <td>{a}</td>
  <td>{a}</td>
</tr>
<tr class="m_odd">
  <td>`set<nondebug_string>`</td>
  <td>{::?}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
</tr>
<tr class="m_even">
  <td>`set<string>`</td>
  <td>{}</td>
  <td>{a}</td>
  <td><ins>{“a”}</ins></td>
  <td><ins>{“a”}</ins></td>
  <td><ins>{“a”}</ins></td>
</tr>
<tr class="m_odd">
  <td>`set<string>`</td>
  <td>{::}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
</tr>
<tr class="m_even">
  <td>`set<string>`</td>
  <td>{::s}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
  <td><ins>{a}</ins></td>
  <td>{“a”}</td>
</tr>
<tr class="m_odd">
  <td>`set<string>`</td>
  <td>{::?}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
  <td>{“a”}</td>
</tr>
<tr class="m_even">
  <td>`vector<nondebug_string>`</td>
  <td>{}</td>
  <td>[a]</td>
  <td><ins>[“a”]</ins></td>
  <td><ins>[“a”]</ins></td>
  <td>[a]</td>
</tr>
<tr class="m_odd">
  <td>`vector<nondebug_string>`</td>
  <td>{::}</td>
  <td>[a]</td>
  <td>[a]</td>
  <td><ins>[“a”]</ins></td>
  <td>[a]</td>
</tr>
<tr class="m_even">
  <td>`vector<nondebug_string>`</td>
  <td>{::s}</td>
  <td>[a]</td>
  <td>[a]</td>
  <td>[a]</td>
  <td>[a]</td>
</tr>
<tr class="m_odd">
  <td>`vector<nondebug_string>`</td>
  <td>{::?}</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
</tr>
<tr class="m_even">
  <td>`vector<string>`</td>
  <td>{}</td>
  <td>[a]</td>
  <td><ins>[“a”]</ins></td>
  <td><ins>[“a”]</ins></td>
  <td><ins>[“a”]</ins></td>
</tr>
<tr class="m_odd">
  <td>`vector<string>`</td>
  <td>{::}</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
</tr>
<tr class="m_even">
  <td>`vector<string>`</td>
  <td>{::s}</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
  <td><ins>[a]</ins></td>
  <td>[“a”]</td>
</tr>
<tr class="m_odd">
  <td>`vector<string>`</td>
  <td>{::?}</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
  <td>[“a”]</td>
</tr-->
</tbody>
</table>

S1 and S2 are inconsistent with the resolution of [[LWG3776]] earlier approved
by LEWG and were not originally proposed. However, after LEWG reversed its two
earlier decisions and LWG found issues with implementability of S0, S1 and S2
are the only viable options and the other ones are only included for reference.
We propose making range and tuple formatters provide `set_debug_format` (option
S2) since they have a debug representation and it is compatible with always
calling `parse` and future optimizations that may omit redundant calls to
`parse` (not proposed in this paper).

<!--S3 is similar to S0 and the difference is that in S3
the default of the element type is changed to the debug format. This means that
users have to give explicit specifiers to get the default format, e.g. `"{::s}"`
instead of `"{::}"`:

```
auto v = std::vector<char>{'a'};
auto s1 = std::format("{::}", v);  // ['a'] in S3, [a] in S0
auto s2 = std::format("{::c}", v); // [a] in both S0 and S3
```

On the other hand combining the debug format with other specifiers such as width
is easier in S3:

```
auto v = std::vector<char>{'a'};
auto s1 = std::format("{::4}", v);  // ['a' ] in S3, [a   ] in S0
auto s2 = std::format("{::4?}", v); // ['a' ] in both S0 and S3
```-->

LEWG Poll Results {#poll-results}
=================

**POLL**: Relax the requirements table 74 and 75 to make the optimization
allowed by the issue resolution of LWG3776 a QoI issue with additional changes
to the handle class removed

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>1
  <td>9
  <td>2
  <td>1
  <td>1
</tr>
</table>

**Outcome**: consensus in favour

**POLL**: Adopt the amended proposed resolution of LWG3776 "Avoid parsing
format-spec if it is not present or empty". Return the issue to LWG for C++23
(to be confirmed by electronic polling)

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>2
  <td>6
  <td>1
  <td>2
  <td>1
</tr>
</table>

**Outcome**: weak consensus in favour

Wording {#wording}
=======

This wording is relative to [[N4917]].

Modify [[format.string.general](http://eel.is/c++draft/format.string.general)]
as indicated:

-1- ...

<i>format-specifier</i>:<br>
&nbsp;&nbsp;`:` <i>format-spec</i>

<i>format-spec</i>:<br>
&nbsp;&nbsp;as specified by the `formatter` specialization for the argument type<ins>;
  cannot start with `}`</ins>

Modify 22.14.6.1 [[formatter.requirements](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=802)]
as indicated:

-3- Given character type `charT`, output iterator type `Out`, and formatting
argument type `T`, in Table 74 and Table 75:

...

`pc.begin()` points to the beginning of the *format-spec* (22.14.2
[format.string]) of the replacement field being formatted in the format string.
If *format-spec* is <ins>not present or</ins> empty then either
`pc.begin() == pc.end()` or `*pc.begin() == '}'`.

<!--
Modify *BasicFormatter* requirements [[tab:formatter.basic](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=803)]
as indicated:

<table>
<tr>
  <th>Expression
  <th>Return type
  <th>Requirement
</th>
<tr>
  <td>`f.format(u, fc)`
  <td>`FC::iterator`
  <td>Formats `u` according to the specifiers stored in
      `*this`, writes the output to `fc.out()`, and returns
      an iterator past the end of the output range.
      The output shall only depend on `u`, `fc.locale()`,
      `fc.arg(n)` for any value `n` of type `size_t`, and
      the range `[pc.begin(), pc.end())` from the last
      call to `f.parse(pc)`. <ins>When the *format-spec*
      (22.14.2 [format.string]) is not present or empty
      the call to `f.parse(pc)` may be omitted.</ins>
</tr>
</table>

Modify *Formatter* requirements [[tab:formatter](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=803)]
as indicated:

<table>
<tr>
  <th>Expression
  <th>Return type
  <th>Requirement
</th>
<tr>
  <td>`f.format(t, fc)`
  <td>`FC::iterator`
  <td>Formats `t` according to the specifiers stored in
      `*this`, writes the output to `fc.out()`, and returns
      an iterator past the end of the output range.
      The output shall only depend on `t`, `fc.locale()`,
      `fc.arg(n)` for any value `n` of type `size_t`, and
      the range `[pc.begin(), pc.end())` from the last
      call to `f.parse(pc)`. <ins>When the *format-spec*
      (22.14.2 [format.string]) is not present or empty
      the call to `f.parse(pc)` may be omitted.</ins>
</tr>
</table-->

<!--
In [[format.formatter.spec](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=803)]:

-2- Let `charT` be either `char` or `wchar_`. Each specialization of `formatter`
is either enabled or disabled, as described below. A *debug-enabled*
specialization of `formatter` additionally provides a public, constexpr,
non-static member function <code>set_debug_format(<ins>bool set</ins>)</code>
which modifies the state of the `formatter` <ins>setting the presentation type
to debug, which is represented by `?` in *std-format-spec*, if `set` is `true`
and the default otherwise.</ins><del> to be as if the type of the *std-format-spec*
parsed by the last call to `parse` were `?`.</del> Each header that declares the
template `formatter` provides the following enabled specializations:

... -->

In [[format.range.formatter](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=809)]

<pre>
namespace std {
  template&lt;class T, class charT = char>
    requires same_as&lt;remove_cvref_t&lt;T>, T> && formattable&lt;T, charT>
  class range_formatter {
    ...
    constexpr const formatter&lt;T, charT>& underlying() const { return <i>underlying_</i>; }

    <ins>constexpr void set_debug_format();</ins>
    <!--ins>constexpr range_formatter();</ins-->

    template&lt;class ParseContext>
      constexpr typename ParseContext::iterator
        parse(ParseContext& ctx);
  };
}
</pre>
...

```
constexpr void set_brackets(basic_string_view<charT> opening, basic_string_view<charT> closing);
```
*Effects*: Equivalent to:

<pre>
<i>opening-bracket_</i> = opening;
<i>closing-bracket_</i> = closing;
</pre>

<pre>
<ins>
constexpr void set_debug_format();<!--constexpr range_formatter();-->
</ins>
</pre>
<ins>
*Effects*: Calls <code><i>underlying_</i>.set_debug_format()</code> if it is a valid
expression.
</ins>

<!--```
template<class ParseContext>
  constexpr typename ParseContext::iterator
    parse(ParseContext& ctx);
```

*Effects*: Parses the format <del>specifier</del><ins>specifiers</ins> as a *range-format-spec*
and stores the parsed specifiers in `*this`. The values of
<code><i>opening-bracket_</i></code>,
<code><i>closing-bracket_</i></code>, and <code><i>separator_</i></code> are
modified if and only if required by the *range-type* or the `n` option, if
present. <del>If:</del>

* <del>the range-type is neither `s` nor `?s`,
* <del><code><i>underlying_</i>.set_debug_format()</code> is a valid expression, and
* <del>there is no *range-underlying-spec*,

<del>then calls <code><i>underlying_</i>underlying_.set_debug_format()</code>.</del>
<p>

<ins>If there is a *range-underlying-spec*, then calls
`underlying_.set_debug_format(false)` if that is a valid expression. Then calls
`underlying_.parse(ctx)` after having advanced `ctx` to the beginning of the
*range-underlying-spec*, if any.</ins>
-->

In [[format.range.fmtstr](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=813)]:

<pre>
namespace std {
  template&lt;range_format K, ranges::input_­range R, class charT>
    requires (K == range_format::string || K == range_format::debug_string)
  struct <i>range-default-formatter</i>&lt;K, R, charT> {

    ...

  public:
    <!--ins><i>constexpr range-default-formatter</i>();</ins-->
    <ins>constexpr void set_debug_format();</ins>
    
    template&lt;class ParseContext>
      constexpr typename ParseContext::iterator
        parse(ParseContext& ctx);

    ...
  };
}
</pre>

<pre>
<!--ins>constexpr <i>range-default-formatter</i>();</ins-->
<ins>constexpr void set_debug_format();</ins>
</pre>

<ins>
*Effects*: Calls <code><i>underlying_</i>.set_debug_format()</code> if it is a valid
expression and `K == range_format::debug_string`.
</ins>

```
template<class ParseContext>
  constexpr typename ParseContext::iterator
    parse(ParseContext& ctx);
```

<!--
-2- *Effects*: Equivalent to:

<pre>
<del>
auto i =<i> underlying_</i>.parse(ctx);
if constexpr (K == range_format::debug_string) {
 <i> underlying_</i>.set_debug_format(true);
}
return i;</del><ins>
return<i> underlying_</i>.parse(ctx);
</ins>
</pre>
-->

In [[format.tuple](
https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf#page=816)]:

-1- For each of `pair` and `tuple`, the library provides the following formatter
specialization where *pair-or-tuple* is the name of the template:

<pre>
namespace std {
  template&lt;class charT, formattable&lt;charT>... Ts>
  struct formatter&lt;pair-or-tuple&lt;Ts...>, charT> {

  ...

  constexpr void set_brackets(basic_string_view&lt;charT> opening,
                              basic_string_view&lt;charT> closing);

  <!--ins>constexpr formatter();</ins-->
  <ins>constexpr void set_debug_format();</ins>
                              
  template&lt;class ParseContext>
    constexpr typename ParseContext::iterator
      parse(ParseContext& ctx);
  };
}
</pre>
...
```
constexpr void set_brackets(basic_string_view<charT> opening, basic_string_view<charT> closing);
```

-6- *Effects*: Equivalent to:

<pre>
<i>opening-bracket_</i> = opening;
<i>closing-bracket_</i> = closing;
</pre>

<pre>
<ins>
constexpr void set_debug_format();
</ins>
</pre>

<ins>*Effects*: For each
element <code><i>e</i></code> in <code><i>underlying_</i></code>, calls
<code><i>e</i>.set_debug_format()</code> if it is a valid expression.</ins>

<!--
```
template<class ParseContext>
  constexpr typename ParseContext::iterator
    parse(ParseContext& ctx);
```

-7- *Effects*: Parses the format <del>specifier</del><ins>specifiers</ins> as a 
*tuple-format-spec* <del>and</del> <ins>,</ins> stores the parsed specifiers in
`*this` <ins> and advances `ctx` to the end of the parsed input</ins>. 
The values of <code><i>opening-bracket_</i></code>,
<code><i>closing-bracket_</i></code>, and <code><i>separator_</i></code> are
modified if and only if required by the *tuple-type*, if present. <del>For each
element <code><i>e</i></code> in <code><i>underlying_</i></code>, if
<code><i>e</i>.set_debug_format()</code> is a valid expression, calls
<code><i>e</i>.set_debug_format()</code>.</del><ins>For each
element <code><i>e</i></code> in <code><i>underlying_</i></code>, calls
<code><i>e</i>.parse(ctx)</code>.</ins>

-8- *Returns*: An iterator past the end of the *tuple-format-spec*.

<ins>*Throws*: `format_error` if `ctx.begin() != ctx.end()` and `*ctx.begin() != '}'`
after parsing *tuple-format-spec* and before invoking <code><i>e</i>.parse(ctx)</code>
for each element <code><i>e</i></code> in <code><i>underlying_</i></code>.</ins>
-->

Acknowledgements {#ack}
================

Thanks to Barry Revzin and Mark de Wever for pointing out issues with debug
formatting of ranges and tuples.

<pre class=biblio>
{
  "LWG3776": {
    "title": "Avoid parsing format-spec if it is not present or empty",
    "authors": "Mark de Wever",
    "href": "https://cplusplus.github.io/LWG/issue3776"
  },
  "N4917": {
    "title": "Working Draft, Standard for Programming Language C++",
    "authors": "Thomas Köppe",
    "etAl": true,
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4917.pdf"
  },
  "P2286": {
    "title": "Formatting Ranges",
    "authors": "Barry Revzin",
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html"
  } <!--,
  "FMT": {
    "title": "The fmt library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  },
  "LIBCXX": {
    "title": "“libc++” C++ Standard Library",
    "href": "https://libcxx.llvm.org/"
  }-->
}
</pre>
