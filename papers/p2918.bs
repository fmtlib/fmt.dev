<pre class='metadata'>
Title: Runtime format strings II
Shortname: P2918
Revision: 2
Audience: LWG
Status: P
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2023-11-07
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
  ins { text-decoration: none; }
  ins code { background: #cfc !important; }

  .poll th, .poll td {
    text-align: right;
    width: 20%;
  }
</style>

<p style="text-align: right">
"Temporary solutions often become permanent problems." â€” Craig Bruce
</p>

Introduction {#intro}
============

[[P2216]] "std::format improvements" introduced compile-time format string
checks which, quoting Barry Revzin, "is a fantastic feature" ([[P2757]]).
However, due to resource constraints it didn't provide a good API for using
formatting functions with format strings not known at compile time.
As a workaround one could use type-erased API which has never been designed
for that. This severely undermined safety and led to poor user experience.
This paper proposes direct support for runtime format strings which has been
long available in the {fmt} library and its companion paper ([[P2905]]) fixes
the safety issue.

Problems {#problems}
========

[[P2216]] "std::format improvements" introduced compile-time format string
checks for `std::format`. This obviously requires format strings be known at
compile time. However, there are some use cases where format strings are only
known at runtime, e.g. when translated through gettext ([[GETTEXT]]).
One possible workaround is using type-erased formatting functions such as
`std::vformat`:

```c++
std::string str = translate("The answer is {}.");
std::string msg = std::vformat(str, std::make_format_args(42));
```

This is not a great user experience because the type-erased API was designed
to avoid template bloat and should only be used by formatting function writers
and not by end users.

Such misuse of the API also introduces major safety issues illustrated in the
following example:

<!-- https://godbolt.org/z/xMnbY8rMj -->
```c++
std::string str = "{}";
std::filesystem::path path = "path/etic/experience";
auto args = std::make_format_args(path.string());
std::string msg = std::vformat(str, args);
```

This innocent-looking code exhibits undefined behavior because format arguments
store a reference to a temporary which is destroyed before use. This has been
discovered and fixed in [[FMT]] which now rejects such code at compile time.

Changes since R1 {#changes1}
================

* Added instructions to bump the `__cpp_lib_format` feature test macro per
    LWG feedback.
* Made the exposition-only member <code><i>str</i></code> of
    <code><i>runtime-format-string</i></code> private per LWG feedback.
* Added a constructor for <code><i>runtime-format-string</i></code> per LWG
    feedback.
* Made functions added in this paper `noexcept` per LWG feedback.
* Immobilized <code><i>runtime-format-string</i></code> per LWG feedback.

Changes since R0 {#changes0}
================

* Added poll results.

Polls {#polls}
=====

<!-- https://docs.google.com/document/d/1bTtXiuN-1V9ksEzgeUyIEfqQZe5fstd6dfRkr7p_-p0/edit -->
LEWG [poll results](https://github.com/cplusplus/papers/issues/1578):

**POLL**: Send P2918R1 (Runtime Format Strings II) to Library for C++26.

```
SF  F  N  A SA
 4  6  0  0  0
```

**Outcome**: Unanimous consent in favor.

Proposal {#proposal}
========

This paper proposes adding the `std::runtime_format` function to explicitly mark
a format string as a runtime one and opt out of compile-time format string
checks.

<table>
<tr>
  <th>Before
  <th>After
</tr>
<tr>
<td>
```
std::vformat(str, std::make_format_args(42));
```
<td>
```
std::format(std::runtime_format(str), 42);
```
</tr>
</table>

This improves usability and makes the intent more explicit. It can also enable
detection of some lifetime errors for arguments ([[P2418]]). This API has been
available in {fmt} since `consteval`-based format string checks were introduced
~2 years ago and usage experience was very positive. In a large codebase with
&gt; 100k calls of `fmt::format` only ~0.1% use `make_format_args`.

<!-- TODO: naming std::runtime_format/std::fmt::runtime -->

This was previously part of [[P2905]] but moved to a separate paper per LEWG
feedback with the original paper focusing on the safety fix only.

Impact on existing code {#impact}
=======================

This paper adds a new API and has no impact on existing code.

Wording {#wording}
=======

Update the value of the feature-testing macro `__cpp_lib_format` to the date of
adoption in [[version.syn](https://eel.is/c++draft/version.syn)].

Change in [[format.syn](https://eel.is/c++draft/format#syn)]:

<pre>
namespace std {
  ...

  // [format.fmt.string], class template basic_format_string
  template&lt;class charT, class... Args>
    struct basic_format_string;

  <ins>
  template&lt;class charT> struct <i>runtime-format-string</i> {  <i>// exposition-only</i>
  private:
    basic_string_view&lt;charT> <i>str</i>;  <i>// exposition-only</i>

  public:
    <i>runtime-format-string</i>(basic_string_view&lt;charT> s) noexcept : str(s) {}

    <i>runtime-format-string</i>(const <i>runtime-format-string</i>&) = delete;
    const <i>runtime-format-string</i>& operator=(const <i>runtime-format-string</i>&) = delete;
  };

  <i>runtime-format-string</i>&lt;char&gt; runtime_format(string_view fmt) noexcept {
    return fmt;
  }
  <i>runtime-format-string</i>&lt;wchar_t&gt; runtime_format(wstring_view fmt) noexcept {
    return fmt;
  }</ins>

  ...
}
</pre>

Change in [[format.fmt.string](https://eel.is/c++draft/format#fmt.string)]:

<pre>
namespace std {
  template&lt;class charT, class... Args>
  struct basic_format_string {
  private:
    basic_string_view&lt;charT> str;         // exposition only

  public:
    template&lt;class T> consteval basic_format_string(const T& s);
    <ins>basic_format_string(<i>runtime-format-string</i>&lt;charT> s) noexcept : str(s.<i>str</i>) {}</ins>

    constexpr basic_string_view&lt;charT> get() const noexcept { return str; }
  };
}
</pre>

Implementation {#impl}
==============

The proposed API has been implemented in the {fmt} library ([[FMT]]).

Acknowledgements {#ack}
================

Thanks to Mateusz Pusz for the suggestion to pass *runtime-format-string* by
rvalue reference that improves safety of the API.

<pre class=biblio>
{
  "FMT": {
    "title": "The fmt library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  },
  "GETTEXT": {
    "title": "gettext",
    "authors": ["Free Software Foundation"],
    "href": "https://www.gnu.org/software/gettext/"
  },
  "P2216": {
    "title": "std::format improvements",
    "authors": ["Victor Zverovich"],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html"
  },
  "P2418": {
    "title": "Add support for `std::generator`-like types to `std::format`",
    "authors": ["Victor Zverovich"],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2418r2.html"
  },
  "p2757": {
    "title": "Type-checking format args",
    "authors": ["Barry Revzin"],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2757r1.html"
  },
  "P2905": {
    "title": "Runtime format strings",
    "authors": ["Victor Zverovich"],
    "href": "https://isocpp.org/files/papers/P2905R1.html"
  }
}
</pre>
